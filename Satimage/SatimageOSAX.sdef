<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE dictionary SYSTEM "file://localhost/System/Library/DTDs/sdef.dtd">
<dictionary title="">
    
<!--
 This SDEF contains every suite element copied from all of Satimage's OSAXen. Their presence here does not guarantee every command will be usable (e.g. GUI commands will not work in XPC Services), but does allow existing AppleScript code to be compiled and decompiled.
 
 To compile an AppleScript that will not use SatimageOSAX.app once distributed (e.g. a Script Editor-created applet that embeds its own copy of Satimage.osax for final distribution), comment out the `use application "SatimageOSAX"` statement once testing is complete and wrap the code in a `using terms from application "SatimageOSAX" … end` block instead. (Remember the applet and its embedded OSAX must be code-signed with the same developer identifier.)
 
 -->

<!-- Satimage.sdef -->

   <suite name="Applescript types" code="tpnm" hidden="yes">
	<!--class name="anything" code="****" description="any class or reference" hidden="yes"/-->
      <class name="reference" code="obj " hidden="yes"/>
      <class name="byte" code="byte" hidden="yes"/>
      <class name="point" code="QDpt" hidden="yes"/>
      <class name="location reference" code="insl" hidden="yes"/>
      <class name="alias" code="alis" hidden="yes" plural="aliases"/>
      <class name="file specification" code="fss " hidden="yes"/>
			<command name="find text obsolete" code="SATIFIND" description="find text literally or using regular expression syntax.">
				<direct-parameter type="string" description="the substring to search for"/>
				<parameter name="in" code="in  " type="string"/>
				<parameter name="case sensitive" code="CaSe" type="boolean" optional="yes" description="default true"/>
				<parameter name="regexp" code="UsGR" type="boolean" optional="yes" description="default false"/>
				<parameter name="using" code="by  " type="string" optional="yes" description="the pattern to generate the string (regexp)"/>
				<result type="list of integer" description="{first character index,last  character index}"/>
			</command>
			<command name="replace obsolete" code="SATIRPLC" description="replace all occurences of a substring">
				<direct-parameter type="string" description="the substring to search for"/>
				<parameter name="by" code="by  " type="string" description="the replacement string"/>
				<parameter name="in" code="in  " type="anything" description="a string or a file path"/>
				<parameter name="case sensitive" code="CaSe" type="boolean" optional="yes" description="default true"/>
				<parameter name="regexp" code="UsGR" type="boolean" optional="yes" description="default false"/>
				<result type="anything" description="the new string"/>
			</command>
 			<!--command name="convert to Windows" code="SATIM2Wn" description="converts a Mac string into a Windows string">
				<direct-parameter type="string" description="the original string"/>
				<result type="string" description="the converted string"/>
			</command>
			<command name="convert to Mac" code="SATIWn2M" description="converts a Windows string into a Mac string">
				<direct-parameter type="string" description="the original string"/>
				<result type="string" description="the converted string"/>
			</command-->
 			<command name="extract string" code="SATIEXTR" description="extract a substring out of a string. Same as AppleScript's expression &quot;text i thru j of s&quot;. Not Unicode-compliant.">
				<direct-parameter type="string" description="the original string"/>
				<parameter name="from" code="from" type="integer" optional="yes" description="index of the first character. Default: 1. Negative numbers index characters backwards."/>
				<parameter name="to" code="to  " type="integer" optional="yes" description="index of the last character. Default: -1. Negative numbers index characters backwards."/>
				<result type="string" description="the substring"/>
			</command>
 			<command name="findxmlstag" code="SATISTAG" description="">
				<direct-parameter  type="string" description="the offset"/>
				<parameter name="at" code="at  " type="integer"  description="the offset"/>
				<result description="the range">
				<type type="integer" list="yes"/>
				</result>
			</command>
     <command name="gziptext" code="SATIGZIP" description="">
      <direct-parameter type="string" description=""/>
      <parameter name="encoding" code="enco" type="string" optional="yes" description="a IANA charset name (&quot;MACINTOSH&quot;, &quot;UTF-8&quot;, &quot;UTF-16&quot;, &quot;ISO-8859-1&quot;…). Default: &quot;UTF-8&quot;"/>
      <parameter name="missing char" code="Lssb" type="string" optional="yes" description="characters that cannot be converted to the specified encoding are represented with this character. Default: gziptext returns an error if it encounters an untranslatable character"/>
      <result type="gzip"/>
	</command>
     <command name="gunziptext" code="SATIUZIP" description="">
      <direct-parameter type="gzip" description=""/>
      <parameter name="encoding" code="enco" type="string" optional="yes" description="a IANA charset name (&quot;MACINTOSH&quot;, &quot;UTF-8&quot;, &quot;UTF-16&quot;, &quot;ISO-8859-1&quot;…). Default: &quot;UTF-8&quot;"/>
      <result type="data"/>
	</command>
</suite>



   <suite name="Satimage Text Additions" code="SATI" description="mailto:support@satimage-software.com">
	<record-type name="matchrecord" code="mRec" description="the record returned by &quot;find text&quot;">
			<property name="matchPos" code="mPos" type="integer" description="offset of the first character found"/>
			<property name="matchLen" code="mLen" type="integer" description="length of the match"/>
			<property name="matchResult" code="mRes" description="the matched string (possibly formatted according to the &quot;using&quot; parameter)}">
			<type type="string"/>
<type type="string" list="yes"/>
</property>
	</record-type>
    <command name="find text" code="SATIFINd" description="find text literally or using regular expression syntax.">
	<synonym name="ufind text"/>
      <direct-parameter type="string" description="the substring to search for"/>
      <parameter name="in" code="$in " type="string" description="a string or an alias"/>
      <parameter name="starting at" code="strt" type="integer" optional="yes" description="default: 0"/>
      <parameter name="for" code="for " type="integer" optional="yes" description="length of text after starting"/>
      <parameter name="case sensitive" code="CaSe" type="boolean" optional="yes" description="default true"/>
       <parameter name="regexp" code="UsGR" type="boolean" optional="yes" description="use regular expression, default false"/>
     <parameter name="backward" code="back" type="boolean" optional="yes" description="default false. Irrelevant with regexp"/>
<parameter name="diacritic sensitive" code="DiSe" type="boolean" optional="yes" description="default true. Irrelevant with regexp"/>
      <parameter name="whole word" code="WhWo" type="boolean" optional="yes" description="default false. Irrelevant with regexp"/>
      <parameter name="regexpflag" code="Flag" optional="yes" description="a subset of {&quot;IGNORECASE&quot;, &quot;EXTEND&quot;, &quot;MULTILINE&quot;, &quot;SINGLELINE&quot;, &quot;FIND LONGEST&quot;, &quot;FIND NOT EMPTY&quot;, &quot;DONT CAPTURE GROUP&quot;, &quot;NOTBOL&quot;, &quot;NOTEOL&quot;, &quot;NEWLINE IN NEGATIVE CC&quot;}; default {}">
        <type type="string" list="yes"/>
      </parameter>
      <parameter name="using" code="by  " optional="yes" description="the pattern to generate the string (regexp only). Useful for constructs with backward references in regexp, ex.: using &quot;name: \\1&quot;. This parameter may be an integer n (between 0 and 9). Equivalent to  &quot;\\n&quot; but matchPos and matchLen correspond to the position of the reference. using may be a list, in this case matchResult is a list of strings">
<type type="string"/>
<type type="integer"/>
<type type="string" list="yes"/>
</parameter>
      <parameter name="all occurrences" code="WaAl" type="boolean" optional="yes" description="returns a list of all occurrences. Default: false"/>
      <parameter name="string result" code="WaMr" type="boolean" optional="yes" description="return only the matching string instead of the whole record"/>
	<parameter name="syntax" code="synt" type="string" optional="yes" description="the syntax for regular expressions. Relevant if regexp parameter is true. A string among (&quot;POSIX&quot; | &quot;POSIX_EXTENDED&quot; | &quot;EMACS&quot; | &quot;GREP&quot; | &quot;GNU_REGEX&quot; | &quot;JAVA&quot; | &quot;PERL&quot; | &quot;RUBY&quot;). Default: &quot;RUBY&quot;"/>
       <parameter name="options" code="Opti" type="string" optional="yes" description="list of  shortcuts:  &apos;a&apos; for &quot;all occurrences&quot;, &apos;r&apos; for &quot;regexp&quot;, &apos;s&apos; for &quot;string result&quot;, &apos;c&apos; for &quot;not case sensitive&quot;, &apos;d&apos; for &quot;not diacritic sensitive&quot;. For instance &quot;ras&quot; stands for for &quot;with regexp, all occurrences and string result&quot;."/>
    <result description="according to &quot;all occurrences&quot; and &quot;string result&quot; parameters">
<type type="matchrecord"/>
<type type="matchrecord" list="yes"/>
<type type="string"/>
<type type="string" list="yes"/>
</result>
<documentation>
<html>
<div>
<b>Discussion</b>
<br/>
Definitions of options of <span class="example-source">regexpflag</span>'s parameters:
<br/>
<br/>
<table>
<tr><td>SINGLELINE</td><td>'^' -> '\A', '$' -> '\z', '\Z' -> '\z'</td></tr>
<tr><td>MULTILINE</td><td>'.' match newline</td></tr>
<tr><td>IGNORECASE</td><td>ignore case (case-insensitive)</td></tr>
<tr><td>EXTEND</td><td>extended pattern form: [:spaces:] are ignored if not escaped</td></tr>
<tr><td>FIND_LONGEST</td><td>find longest match when using alternations |</td></tr>
<tr><td>FIND_NOT_EMPTY</td><td>ignore empty match</td></tr>
<tr><td>NEGATE_SINGLELINE</td><td>clear SINGLELINE which is default on in POSIX, POSIX_EXTENDED, PERL and JAVA syntaxes.</td></tr>
<tr><td>DONT_CAPTURE_GROUP</td><td>only named group captured: (?&lt;name&gt;subexp)</td></tr>
<tr><td>NOTBOL</td><td>begin of text isn't considered as begin of line</td></tr>
<tr><td>NOTEOL</td><td>end of text isn't considered as end of line</td></tr>
<tr><td>NEWLINE IN NEGATIVE CC</td><td>negative character classes match newline, for instance [^a-z]</td></tr>
</table>
<br/>
Regular-Expressions.info maintains a complete <a target="_blank" href="http://www.regular-expressions.info/tutorial.html">tutorial</a> for regular expressions.
<br/>
</div>
<div style="display:none" class="example">
<div class="example-source">set the_str to pi as string 
find text "3" in the_str 
  --  {matchPos:0, matchLen:1, matchResult:"3"} 

set s to "2007-12-24"
find text "([[:digit:]]+)" in s using "\\1" with regexp, all occurrences and string result
-- {"2007", "12", "24"}
</div>
</div>
</html>
</documentation>
    </command>
    <command name="change" code="SATIRPLl" description="replace all occurrences of a substring">
	<synonym name="uchange"/>
      <direct-parameter description="the substring(s) to search for">
 	<type type="string"/>
	<type type="string" list="yes"/>
	</direct-parameter>
     <parameter name="into" code="by  " description="the replacement string(s). If regexp is true, it may contain backward references">
 	<type type="string"/>
	<type type="string" list="yes"/>
	</parameter>
     <parameter name="in" code="$in "  description="">
	<type type="string"/>
	<type type="string" list="yes"/>
	<type type="alias"/>
	</parameter>
      <parameter name="starting at" code="strt" type="integer" optional="yes" description="default: 0"/>
      <parameter name="for" code="for " type="integer" optional="yes" description="length of text after starting"/>
      <parameter name="case sensitive" code="CaSe" type="boolean" optional="yes" description="default true"/>
       <parameter name="regexp" code="UsGR" type="boolean" optional="yes" description="default false"/>
<parameter name="diacritic sensitive" code="DiSe" type="boolean" optional="yes" description="default true. Irrelevant with regexp"/>
      <parameter name="whole word" code="WhWo" type="boolean" optional="yes" description="default false. Irrelevant with regexp"/>
      <parameter name="regexpflag" code="Flag" optional="yes" description="see the documentation for find text">
        <type type="string" list="yes"/>
      </parameter>
	<parameter name="syntax" code="synt" type="string" optional="yes" description="see the documentation for find text"/>
	<parameter name="verbatim" code="RStr" type="boolean" optional="yes" description="default: false (regexp only). If verbatim, the replacement string (&quot;into&quot; parameter) is not interpreted"/>
	<parameter name="only backreference" code="back" optional="yes" description="(regexp only). An integer in  (0,9) or a name corresponding to a named backreterence of the direct parameter. Default: 0, replace the matched substring  by the &quot;into&quot; parameter; otherwise replace only the provided backreference.">
	<type type="integer"/>
	<type type="string"/>
	</parameter>
         <parameter name="options" code="Opti" type="string" optional="yes" description="list of  shortcuts (see  &quot;find text&quot;)"/>
   <result type="anything" description="the new string if the &quot;in&quot; parameter is a string, otherwise the number of changes performed in the file"/>
<documentation>
<html>
<div style="display:none" class="example">
<div class="example-source">set the_str to "hello" 
change "e" into "u" in the_str 
  --  "hullo"

change {"e", "o"} into {"E", "O"} in "hello world" 
  --  "hEllO wOrld"

change {"e.", "o."} into "O" in "hello world"  with regexp 
  --  "hOlOwOld"

change "([0-9]{1,2})/([0-9]{1,2})" into "\\2/\\1" in {"31/12/2007", "29/2/2008"} with regexp 
  -- {"12/31/2007", "2/29/2008"}
</div>
</div>
</html>
</documentation>
    </command>
	<command name="re_compile" code="SATICmpi" description="check a regular expression">
				<direct-parameter type="string" description="the regular expression"/>
	<parameter name="syntax" code="synt" type="string" optional="yes" description="the syntax for regular expressions. Relevant if regexp parameter is true. A string among (&quot;POSIX&quot; | &quot;POSIX_EXTENDED&quot; | &quot;EMACS&quot; | &quot;GREP&quot; | &quot;GNU_REGEX&quot; | &quot;JAVA&quot; | &quot;PERL&quot; | &quot;RUBY&quot;). Default: &quot;RUBY&quot;"/>
	</command>
    <command name="splittext" code="SATISplt" description="split a text according to a given separator pattern. Optional matching parameters work like with the &quot;find text&quot; command">
      <direct-parameter type="string" description="the string to split"/>
      <parameter name="using" code="by  " type="string" description="the separator"/>
      <parameter name="case sensitive" code="CaSe" type="boolean" optional="yes" description="default true"/>
     <parameter name="regexp" code="UsGR" type="boolean" optional="yes" description="consider the separator pattern as a        regular expression, default false"/>
<parameter name="diacritic sensitive" code="DiSe" type="boolean" optional="yes" description="default true. Irrelevant with regexp"/>
      <parameter name="whole word" code="WhWo" type="boolean" optional="yes" description="consider only whole word separators. default false. Irrelevant with regexp"/>
          <parameter name="options" code="Opti" type="string" optional="yes" description="list of  shortcuts (see  &quot;find text&quot;)"/>
       <result description="the splitted text. If no separator found, the returned list contains one element: the original string.">
        <type type="string" list="yes"/>
        </result>
    </command>
     <command name="filter text" code="SATIGPli" description="parse a string (or a text file) into  a property list">
      <direct-parameter type="string" description="the pattern"/>
      <parameter name="in" code="$in " type="string" description="a string or an alias"/>
      <parameter name="key" code="key " type="string" description="the pattern to generate the keys in the plist"/>
      <parameter name="using" code="by  " type="string" optional="yes" description="the pattern to generate the strings of the plist. Default: &quot;\\0&quot;"/>
      <parameter name="as" code="rtyp" type="type" optional="yes" description="list or string. Default: string, the plist contains for each key a concatenation of the matches separated by a linefeed character (or the provided separator). Otherwise the plist contains for each key an array of matches."/>
      <parameter name="duplicates" code="Dupl" type="boolean" optional="yes" description="relevant if the &quot;as&quot; parameter is list. Without duplicates, only new strings are added. Default: true"/>
      <parameter name="separator" code="sepa" type="string" optional="yes" description="relevant if the &quot;as&quot; parameter is string. Default: linefeed"/>
     <parameter name="case sensitive" code="CaSe" type="boolean" optional="yes" description="default: true"/>
      <parameter name="whole word" code="WhWo" type="boolean" hidden="yes" optional="yes" description=""/>
      <parameter name="regexpflag" code="Flag" optional="yes" description="like in the find text command">
        <type type="string" list="yes"/>
      </parameter>
	<parameter name="syntax" code="synt" type="string" optional="yes" description="like in the find text command"/>
      <parameter name="into" code="into" optional="yes" description="the file destination for the plist or an existing plist (see the XMLLib.osax dictionary). Default: filter text returns the property list as string">
 	<type type="file"/>
	<type type="CFRef"/>
	</parameter>
     <result type="string" description="the XML data if the into parameter is missing"/>
<documentation>
<html>
<div style="display:none" class="example">
<div class="example-source">set s to "John is ten
Anna is twelve
John is at school
Anna sleeps"
filter text "^([A-z]+) is (.*)" in s key "\\1" using "\\2"  as list
</div>
returns a string containing a plist:
<div class="example-source">&lt;dict&gt;
	&lt;key&gt;Anna&lt;/key&gt;
	&lt;array&gt;
		&lt;string&gt;twelve&lt;/string&gt;
	&lt;/array&gt;
	&lt;key&gt;John&lt;/key&gt;
	&lt;array&gt;
		&lt;string&gt;ten&lt;/string&gt;
		&lt;string&gt;at school&lt;/string&gt;
	&lt;/array&gt;
&lt;/dict&gt;
</div>
</div>
</html>
</documentation>
    </command>
     <command name="file offset" code="SATIFoff" description="find a string in a file and return the offset in byte.">
      <direct-parameter type="string" description="the character(s) to find"/>
	<parameter name="in" code="in  " type="alias"/>
	<parameter name="starting at" code="strt" type="integer" optional="yes" description="the initial offset in byte"/>
      <parameter name="encoding" code="enco" type="string" optional="yes" description="a IANA charset name (&quot;MACINTOSH&quot;, &quot;UTF-8&quot;, &quot;UTF-16&quot;, &quot;ISO-8859-1&quot;, &quot;windows-1252&quot;…). Default: &quot;UTF-8&quot;"/>
	<parameter name="inclusive" code="incl" type="boolean"  optional="yes"  description="default: false. If true, the offset includes the requested string"/>
      <result type="integer"/>
	</command>
   <command name="readtext" code="SATIRead" description="read a text file. readtext is aware of the presence of BOM.">
      <direct-parameter type="alias" description="or an url"/>
	<parameter name="for" code="for " type="integer" optional="yes" description="the maximum number of bytes to read"/>
	<parameter name="starting at" code="strt" type="integer" optional="yes" description="the initial offset in byte"/>
      <parameter name="encoding" code="enco" type="string" optional="yes" description="a IANA charset name (&quot;MACINTOSH&quot;, &quot;UTF-8&quot;, &quot;UTF-16&quot;, &quot;ISO-8859-1&quot;, &quot;windows-1252&quot;…)"/>
 	<parameter name="redirect" code="redi" type="boolean" optional="yes" description="redirects automatically (http). Default: true"/>
 	<parameter name="timeout" code="Time" type="real" optional="yes" description="default : 10 seconds"/>
    <result type="string"/>
	</command>
     <command name="writetext" code="SATIWrit" description="write a string in a file.">
      <direct-parameter type="string" description=""/>
	<parameter name="to" code="to  " type="file" description="or an url"/>
	<parameter name="append" code="appe" type="boolean" optional="yes" description="default: false. If true, append the string at the end of the file"/>
      <parameter name="encoding" code="enco" type="string" optional="yes" description="a IANA charset name (&quot;MACINTOSH&quot;, &quot;UTF-8&quot;, &quot;UTF-16&quot;, &quot;ISO-8859-1&quot;, &quot;windows-1252&quot;…). Default: &quot;UTF-8&quot;"/>
      <parameter name="missing char" code="Lssb" type="string" optional="yes" description="characters that cannot be converted to the specified encoding are represented with this character. Default: writetext returns an error if it encounters an untranslatable character"/>
      <result type="string"/>
	</command>
			<command name="uppercase" code="SATIUPPE" description="move to uppercase.">
				<direct-parameter description="the original string(s)">
					<type type="string"/>
					<type type="string" list="yes"/>
				</direct-parameter>
				<result description="the uppercase string(s)">
					<type type="string"/>
					<type type="string" list="yes"/>
				</result>
		</command>
			<command name="lowercase" code="SATILOWE" description="move to lowercase.">
				<direct-parameter description="the original string(s)">
					<type type="string"/>
					<type type="string" list="yes"/>
				</direct-parameter>
				<result description="the lowercase string(s)">
					<type type="string"/>
					<type type="string" list="yes"/>
				</result>
			</command>
			<command name="titlecase" code="SATICAPI" description="">
				<synonym name="capitalize"/>
				<direct-parameter description="the original string(s)">
					<type type="string"/>
					<type type="string" list="yes"/>
				</direct-parameter>
				<result description="the capitalized string(s)">
					<type type="string"/>
					<type type="string" list="yes"/>
				</result>
			</command>
			<command name="format" code="SATIFORM" description="format a real number using a specification string. Ex: format pi into &quot;##.##&quot;-&gt;&quot;3.14&quot;. '0' instead of '#' forces trailing zeros. '^' adds a space. &quot;+f1;-f2;f3&quot; provides formats for numbers &gt;0, &lt;0, =0. Encapsulate custom strings with &quot;'&quot;.">
				<direct-parameter type="real" description="the number"/>
				<parameter name="into" code="into" type="string" description="the formatting string, using #,^,O,.,%,',(,),+,-"/>
				<parameter name="underflow test" code="ZeTe" type="boolean" optional="yes" description="switch to scientific format if the number is too small with respect to the formatting string (default: false)"/>
				<result type="string" description="the formatted number"/>
			</command>
			<command name="atof" code="SATIATOF" description="convert a string into a number. Ex: atof &quot;1.5&quot;">
				<direct-parameter description="">
				<type type="string"/>
				<type type="string" list="yes"/>
				</direct-parameter>
				<result description="">
				<type type="real"/>
				<type type="real" list="yes"/>
				</result>
			</command>
			<command name="atoi" code="SATIATOI" description="convert a string into an integer. Ex: atoi &quot;0xa0&quot; -> 160">
				<direct-parameter description="">
				<type type="string"/>
				<type type="string" list="yes"/>
				</direct-parameter>
				<parameter name="base" code="base" type="integer" optional="yes" description="the base value, between 2 and 36"/>
				<result description="">
				<type type="integer"/>
				<type type="integer" list="yes"/>
				</result>
			</command>
    <command name="encode entities" code="SATIEsEn" description="substitutes the 5 reserved XML characters found in the direct parameter with the corresponding XML entities.">
      <direct-parameter type="string"/>
      <result type="string"/>
<documentation>
<html>
<div style="display:none" class="example">
<div class="example-source">encode entities "'foo' > 'Foo'"
-- "&amp;apos;foo&amp;apos; &amp;gt; &amp;apos;Foo&amp;apos;"
</div>
</div>
</html>
</documentation>
    </command>
    <command name="resolve entities" code="SATIReEn" description="substitutes the XML character entities found in the direct parameter (not the html entities such as &amp;eacute;) with the corresponding Unicode characters.">
      <direct-parameter type="string"/>
      <result type="string"/>
<documentation>
<html>
<div style="display:none" class="example">
<div class="example-source">resolve entities "&amp;apos;foo&amp;apos; &amp;gt; &amp;apos;Foo&amp;apos;"
-- "'foo' > 'Foo'"
</div>
</div>
</html>
</documentation>
    </command>
    <command name="escapeURL" code="SATIAdd%" description="encode a URI by replacing each instance of certain characters by one, two, or three escape sequences representing the UTF-8 encoding of the character">
      <direct-parameter type="string" description="a URI or a URI component"/>
      <parameter name="escaping" code="escp" type="string" optional="yes" description="additional characters to escape. Default &quot;&quot;. To translate URI component (for a GET request for instance) into legal URI component use &quot;;,/?:@&amp;=+$&quot;"/>
      <result type="string" description="a legal URI"/>
    </command>
    <command name="unescapeURL" code="SATIRem%" description="decode a URI previously encoded with &quot;escapeURL&quot;.">
      <direct-parameter type="string"/>
      <parameter name="keeping" code="leav" type="string" optional="yes" description="characters to leave escaped. Default &quot;&quot;."/>
      <result type="string"/>
    </command>
    <command name="normalize unicode" code="SATIUnNo" description="normalize Unicode text (canonical composition or decomposition)">
      <direct-parameter type="string" description=""/>
     <parameter name="decomposition" code="Deco" optional="yes" type="boolean" description="want canonical decomposition. default: false. For example, HFS Plus converts all file names to decomposed Unicode, while Macintosh keyboards generally produce precomposed Unicode."/>
      <result type="string"/>
    </command>
    <command name="transform unicode" code="SATIUnTr" description="transform Unicode text ">
      <direct-parameter description="">
	<type type="string"/>
	<type type="string" list="yes"/>
	</direct-parameter>
     <parameter name="using" code="by  "  type="string" description="any valid ICU transform ID (see http://userguide.icu-project.org/transforms/general)"/>
     <parameter name="inverse" code="inv "  type="boolean" optional="yes" description="inverse transformation requested. Default: false"/>
      <result>
	<type type="string"/>
	<type type="string" list="yes"/>
	</result>
<documentation>
<html>
<div style="display:none" class="example">
<div class="example-source">set res to transform unicode "éç" using "NFD; [:Nonspacing Mark:] Remove"
--"ec"
set res to transform unicode res using "Any-Hex/XML"
--"&amp;#x65;&amp;#x63;"
transform unicode res using "Any-Hex/XML" with inverse
--"ec"
</div>
</div>
</html>
</documentation>
    </command>
    <command name="hash" code="SATIHASH" description="normalize (KD) and hash a string">
      <direct-parameter type="string" description=""/>
      <result type="integer"/>
    </command>
    <command name="join" code="SATIJoin" description="coerce as Unicode text">
      <direct-parameter description="">
		<type type="string" list="yes"/>
	 </direct-parameter>
     <parameter name="using" code="by  " type="string" description="the text delimiter"/>
      <result type="string"/>
    </command>
    <command name="printf" code="SATIprtf" description="format a string like the C function printf.">
      <direct-parameter type="string" description="the format string"/>
      <parameter name="parameters" code="para" description="">
        <type type="anything" list="yes"/>
      </parameter>
      <result type="string" description="the formatted string"/>
<documentation>
<html>
<div style="display:none" class="example">
<div class="example-source">printf "printf prints integers like %d, floats like %g, strings like \"%s\"." parameters {12, pi, "hello"}
-- "printf prints integers like 12, floats like 3.14159, strings like \"hello\"."
printf "escape %% with %%%% like in %2.f%%" parameters {39.12}
-- "escape % with %% like in 39%"

-- use of positional parameters:
set params to {"car", "red"}
printf "The %s is %s." parameters params
-- "The car is red."
printf "The %2$s %1$s." parameters params
-- "The red car."

-- use of list parameters:
printf ("%.1g	%.3g" &amp; return) parameters {randomarray 4, randomarray 4}
--"0.3	0.846
0.1	0.348
1	0.0174
0.6	0.444
"
</div>
</div>
</html>
</documentation>
    </command>
     <command name="strftime" code="SATIstrf" description="format a date using a specification string like in the C function strftime.">
      <direct-parameter>
 		<type type="date"/>
		<type type="date" list="yes"/>
	</direct-parameter>
     <parameter name="into" code="into" type="string" description="the formatting string. To obtain ISO 8601 dates, use &quot;%FT%TZ&quot; or &quot;%GW%V-%uT%TZ&quot; (using the 'with GMT' parameter)"/>
     <parameter name="GMT" code="GMT " type="boolean" optional="yes" description="if true, output date as GMT. Default: false, the ouput date is local."/>
      <result type="string" description="the formatted date"/>
<documentation>
<html>
<div style="display:none" class="example">
<div class="example-source">set d to current date
-- some ISO 8601 formats:
strftime d into "%FT%T%z"
-- "2007-01-15T16:10:56+0100"
strftime d into "%GW%V-%uT%T%z"
-- "2007W03-1T16:10:56+0100"
--if you need to store the date d as UTC:
strftime d into "%FT%TZ" with GMT
-- "2007-01-15T15:10:56Z"
strftime d into "%a, %b %d, %Y %H:%M:%S %z"
-- "Mon, Jan 15, 2007 16:10:56 +0100"
</div>
</div>
</html>
</documentation>
    </command>
    <command name="strptime" code="SATIstrp" description="Reverse of strftime.">
      <direct-parameter description="the date string(s)">
		<type type="string"/>
		<type type="string" list="yes"/>
	</direct-parameter>
      <parameter name="encoding" code="enco" type="string" description="the format of the date corresponding to the into parameter of strftime."/>
     <parameter name="GMT" code="GMT " type="boolean" optional="yes" description="the intput date string is GMT (if unspecified by the format). Default: false"/>
<parameter name="as" code="rtyp" type="type" optional="yes" description="date or real (seconds since January 1 2001). Default: date"/>
      <result description="the date">
<type type="date"/>
<type type="real"/>
</result>
<documentation>
<html>
<div style="display:none" class="example">
<div class="example-source">strptime "2007-01-15T16:10:56+0100" encoding "%FT%T%z"
-- date "Monday, January 15, 2007 16:10:56"
strptime "2007-01-15T16:10:56Z" encoding "%FT%T"
-- date "Monday, January 15, 2007 16:10:56"
strptime "2007-01-15T16:10:56Z" encoding "%FT%T" with GMT
-- date "Monday, January 15, 2007 17:10:56"
strptime "Mon, Jan 15, 2007 16:25:36 +0100" encoding "%a, %b %d, %Y %H:%M:%S %z"
-- date "Monday, January 15, 2007 16:25:36"
</div>
</div>
</html>
</documentation>
    </command>
  </suite>
  
  <suite name="Satimage File Additions" code="SATI">
			<class name="URL information" code="URLI" description="Reply record for the ‘URL info for’ command">
				<property name="scheme" code="pusc" type="Unicode text" description="the access scheme"/>
				<property name="host" code="HOST" type="Unicode text" description="the host specified by this URL"/>
				<property name="path" code="FTPc" type="Unicode text" description="the (escaped) location of the target on the host"/>
				<property name="unix path" code="psxP" type="Unicode text" description="the (unescaped) location of the target on the host"/>
				<property name="name" code="pnam" type="Unicode text" description="the name of the item"/>
				<property name="user name" code="RAun" type="Unicode text" description="the user name by which to access this URL"/>
				<property name="password" code="RApw" type="Unicode text" description="the password by which to access this URL"/>
				<property name="name extension" code="nmxt" type="Unicode text" description="the name extension of the URL"/>
				<property name="url parameters" code="Upar" type="Unicode text"/>
				<property name="url query" code="Quer" type="Unicode text"/>
				<property name="url fragment" code="Ufra" type="Unicode text"/>
				<property name="type identifier" code="utid" type="Unicode text" description="the item’s type identifier"/>
				</class>
		<!--command name="alias description for" code="SATIALIS" description="provide info needed to refer to a remote item">
				<direct-parameter type="alias" description="the remote item"/>
				<result description="{the AppleTalk zone name, the server machine name, the server volume name, folder name, […], item name}">
		<type type="string" list="yes"/>
	</result>
			</command-->
		<command name="alias description for" code="SATIALIS" description="resolve the alias file">
				<direct-parameter type="alias" description=""/>
				<result description="the original item">
		<type type="string" />
	</result>
			</command>
			<command name="navchoose file" code="SATIstdf" description="choose file with navigation services">
				<parameter name="with prompt" code="prmp" type="string" optional="yes" description="a prompt to be displayed in the file chooser"/>
				<parameter name="of type" code="ftyp" optional="yes" description="restrict the files shown to only these file types">
					<type type="string" list="yes"/>
				</parameter>
				<parameter name="starting at" code="from" type="alias" optional="yes" description="the default file or folder"/>
				<parameter name="multiple files" code="mlfl" type="boolean" optional="yes" description="allow multiple files selection (default true)"/>
				<parameter name="show packages" code="vipa" type="boolean" optional="yes" description="(default true)"/>
				<parameter name="open packages" code="oppa" type="boolean" optional="yes" description="(default false)"/>
				<parameter name="of extension" code="Nmxt" optional="yes" description="list of allowed file extensions">
					<type type="string" list="yes"/>
				</parameter>
			<parameter name="invisibles" code="lfiv" type="boolean" optional="yes" description="Show invisible files and folders? (default is false)"/>
				<parameter name="key" code="key " type="integer" optional="yes" description="associate a key to the folder that the user will select. If no 'starting at' parameter is provided, assume the corresponding folder as the default folder."/>
				<result description="the chosen files">
					<type type="alias" list="yes"/>
				</result>
			</command>
			<command name="navchoose folder" code="SATIstfl" description="choose folder with navigation services">
				<parameter name="with prompt" code="prmp" type="string" optional="yes" description="a prompt to be displayed in the folder chooser"/>
				<parameter name="starting at" code="from" type="alias" optional="yes" description="the default folder"/>
				<parameter name="multiple files" code="mlfl" type="boolean" optional="yes" description="allow multiple folders selection (default true)"/>
				<parameter name="open packages" code="oppa" type="boolean" optional="yes" description="(default false)"/>
				<parameter name="key" code="key " type="integer" optional="yes" description="associate a key to the folder that the user will select. If no 'starting at' parameter is provided, assume the corresponding folder as the default folder."/>
				<result description="the chosen folders">
					<type type="alias" list="yes"/>
				</result>
			</command>
			<command name="navchoose object" code="SATIstob" description="choose file or folder with navigation services">
				<parameter name="with prompt" code="prmp" type="string" optional="yes" description="a prompt to be displayed in the folder chooser"/>
				<parameter name="starting at" code="from" type="alias" optional="yes" description="the default folder"/>
				<parameter name="multiple files" code="mlfl" type="boolean" optional="yes" description="allow multiple objects selection (default true)"/>
				<parameter name="show packages" code="vipa" type="boolean" optional="yes" description="(default true)"/>
				<parameter name="open packages" code="oppa" type="boolean" optional="yes" description="(default false)"/>
				<parameter name="key" code="key " type="integer" optional="yes" description="associate a key to the folder that the user will select. If no 'starting at' parameter is provided, assume the corresponding folder as the default folder."/>
				<result description="the chosen objects">
					<type type="alias" list="yes"/>
				</result>
			</command>
			<command name="navchoose volume" code="SATIstvo" description="choose volume with navigation services">
				<parameter name="with prompt" code="prmp" type="string" optional="yes" description="a prompt to be displayed in the folder chooser"/>
				<parameter name="starting at" code="from" type="alias" optional="yes" description="the default folder"/>
				<result description="the chosen folders">
					<type type="alias" list="yes"/>
				</result>
			</command>
			<command name="navask save" code="SATInask" description="prompt for save">
				<parameter name="file name" code="fnam" type="string" optional="yes" description="name of the file"/>
				<parameter name="action" code="acti" type="integer" optional="yes" description="1 = before closing, 2 = before quitting, 0 = none"/>
				<result type="integer" description="1 save, 2 cancel, 3 don't save"/>
			</command>
			<command name="navchoose file name" code="SATInwfl" description="Get a new file specification from the user, without creating the file. Uses navigation services">
				<parameter name="with prompt" code="prmt" type="string" optional="yes" description="the text to display in the file creation dialog box"/>
				<parameter name="default name" code="dfnm" type="string" optional="yes" description="the default name for the new file"/>
				<parameter name="with menu" code="wmnu" optional="yes" description="list of menu items">
					<type type="string" list="yes"/>
				</parameter>

				<parameter name="menu index" code="PInd" type="integer" optional="yes" description="index of the menu item to display"/>
				<parameter name="starting at" code="from" type="alias" optional="yes" description="the default folder"/>
				<parameter name="show packages" code="vipa" type="boolean" optional="yes" description="(default true)"/>
				<parameter name="open packages" code="oppa" type="boolean" optional="yes" description="(default false)"/>
				<parameter name="key" code="key " type="integer" optional="yes" description="associate a key to the folder that the user will select, and assume the corresponding folder as the default folder."/>
				<result type="file specification" description="the file the user specified"/>
			</command>
			<command name="navnew folder" code="SATIstnf" description="Get a new folder specification from the user. Uses navigation services">
				<parameter name="with prompt" code="prmt" type="string" optional="yes" description="the text to display in the file creation dialog box"/>
				<parameter name="starting at" code="from" type="alias" optional="yes" description="the default folder"/>
				<parameter name="open packages" code="oppa" type="boolean" optional="yes" description="(default false)"/>
				<parameter name="key" code="key " type="integer" optional="yes" description="associate a key to the folder that the user will select, and assume the corresponding folder as the default folder."/>
				<result type="file specification" description="the folder the user specified"/>
			</command>
			<command name="URL info for" code="SATIIURL" description="Parse an URL and returns an URL information record">
				<direct-parameter type="string" description="an URL or an alias"/>
				<parameter name="size" code="ptsz" type="boolean" optional="yes" description="Return the size of the file or folder? (default is false)"/>
				<result type="URL information"/>
			</command>
    <command name="absoluteURL" code="SATIaURL" description="resolve a relative URL using a base URL or coerce an alias, a posix path or a URL.">
      <direct-parameter description="a relative URL or  an alias, a posix path (starting with / or ~) (Or a list of such.)">
	<type type="string"/>
	<type type="alias"/>
	</direct-parameter>
      <parameter name="from" code="from" optional="yes" description="the base URL ">
	<type type="string"/>
	<type type="alias"/>
	</parameter>
      <parameter name="as" code="rtyp" optional="yes" type="type" description="Unicode text, alias, unix path, path..."/>
      <result description="">
	<type  type="string"/>
	<type  type="alias"/>
	</result>
<documentation>
<html>
<div style="display:none" class="example">
<div class="example-source">set f to path to library folder from local domain
absoluteURL f
--"file://localhost/Library/"
absoluteURL "Application%20Support" from f
--"file://localhost/Library/Application%20Support"
absoluteURL "Application%20Support" from f as unix path
--"/Library/Application Support"
absoluteURL "/Library/Application Support"
--"file://localhost/Library/Application%20Support"
absoluteURL "Application%20Support" from f as alias

absoluteURL "en/smile/index.html#top" from "http://www.satimage-software.com"
"http://www.satimage-software.com/en/smile/index.html#top"
</div>
</div>
</html>
</documentation>
    </command>
    <command name="relativeURL" code="SATIrURL" description="translate an URL into the most suitable relative URL with respect to a given base.">
      <direct-parameter description="an absolute URL">
	<type type="string"/>
	<type type="alias"/>
	</direct-parameter>
      <parameter name="from" code="from" description="the base URL">
	<type type="string"/>
	<type type="alias"/>
	</parameter>
      <result type="string" description="a relative or absolute URL"/>
    </command>
			<command name="list files" code="SATIlsfl" description="make a list of the files contained in the folder">
				<direct-parameter description="a folder">
				<type type="alias"/>
				<type type="string"/>
				<type type="alias" list="yes"/>
				<type type="string" list="yes"/>
				</direct-parameter>
				<parameter name="recursively" code="recu" type="boolean" optional="yes" description="default: true. If false, list files and folders."/>
				<parameter name="invisibles" code="invi" type="boolean" optional="yes" description="default: false"/>
				<parameter name="of extension" code="Nmxt" optional="yes" description="the required file extension(s)">
					<type type="string" list="yes"/>
				</parameter>
				<parameter name="conforming to" code="yUTI" optional="yes" description="the requested Universal Type Identifier(s) (UTI)">
					<type type="string" list="yes"/>
				</parameter>
				<parameter name="not conforming to" code="nUTI" optional="yes" description="the forbidden Universal Type Identifier(s) (UTI)">
					<type type="string" list="yes"/>
				</parameter>
				<parameter name="starting with" code="Strw" optional="yes" type="string" description=""/>
				<parameter name="ignoring packages" code="inBu" optional="yes" type="boolean" description="consider packages as folders. Default: false"/>
				<parameter name="after" code="afte" type="date" optional="yes" description="list only files whose modification date is after the after date parameter"/>
				<parameter name="before" code="befo" type="date" optional="yes" description="list only files whose modification date is before the before date parameter"/>
				<parameter name="names only" code="namo" type="boolean" optional="yes" description="default: false"/>
				<parameter name="as" code="rtyp" optional="yes" type="type" description="string (URL), alias, unix path, path..."/>
				<result>
				<type type="string" list="yes"/>
				<type type="alias" list="yes"/>
				</result>
<documentation>
<html>
<div style="display:none" class="example">
<div class="example-source">
set {f} to navchoose folder
set x to list files f not conforming to {"public.image", "public.movie", "public.archive"} ¬
after ((get current date) - 3600) without recursively
</div>
</div>
</html>
</documentation>
			</command>
			<command name="glob" code="SATIGlob" description="list  the files or the folders matching a unix pathname pattern">
				<direct-parameter description="the pattern">
				<type type="string"/>
				<type type="string" list="yes"/>
				</direct-parameter>
				<parameter name="from" code="from" type="alias" optional="yes" description="the working directory. By default, the direct parameter must be a full posix path pattern"/>
				<parameter name="invisibles" code="invi" type="boolean" optional="yes" description="default: false"/>
				<parameter name="of extension" code="Nmxt" optional="yes" description="the required file extension(s)">
					<type type="string" list="yes"/>
				</parameter>
				<parameter name="not conforming to" code="nUTI" optional="yes" description="the forbidden Universal Type Identifier(s) (UTI)">
					<type type="string" list="yes"/>
				</parameter>
				<parameter name="after" code="afte" type="date" optional="yes" description="list only items whose modification date is after the after date parameter"/>
				<parameter name="before" code="befo" type="date" optional="yes" description="list only items whose modification date is before the before date parameter"/>
				<parameter name="names only" code="namo" type="boolean" optional="yes" description="default: false"/>
				<parameter name="as" code="rtyp" optional="yes" type="type" description="string (URL), alias, unix path, path..."/>
				<result>
				<type type="string" list="yes"/>
				<type type="alias" list="yes"/>
				</result>
			</command>
			<command name="backup" code="SATISYNC" description="synchronizes 2 folders">
				<direct-parameter type="file specification" description="the source folder"/>
				<parameter name="onto" code="onto" type="file specification" description="the destination folder"/>
				<parameter name="level" code="Repo" type="integer" optional="yes" description="0: report only, 1: synchronize folders, 2 : synchronize and report. Default 0. "/>
				<parameter name="after" code="afte" type="date" optional="yes" description="files older than this date are not considered."/>
				<parameter name="recursively" code="RECU" type="boolean" optional="yes" description="recursively synchronize subfolders. Default true."/>
				<parameter name="except folders" code="fnam" optional="yes" description="names of folders to be omitted">
				<type type="string" list="yes"/>
				</parameter>
				<parameter name="except extensions" code="fext" optional="yes" description="file extensions to be omitted">
				<type type="string" list="yes"/>
				</parameter>
				<parameter name="only extensions" code="oext" optional="yes" description="consider only these file extensions">
				<type type="string" list="yes"/>
				</parameter>
				<result type="string" description="the (optional) report"/>
			</command>
  </suite>
  
  <suite name="Resource Suite" code="tpnm" description="Utilities to read and write resources from/to a file." hideen="yes">
			<command name="load resource" description="get the resource of the given type and id from the specified file" code="RESORGET">
				<direct-parameter type="integer" description="index of the desired resource"/>
				<parameter name="type" code="KRTY" type="string" description="type of the desired resource"/>
				<parameter name="from" code="KRFI" type="alias" description="file to read from"/>
				<parameter name="as" code="KRWN" type="type" optional="yes" description="an AppleScript type for the returned result"/>
				<result type="anything" description="any AppleScript data that is stored  in the resource: data, object specification, reference, etc."/>
			</command>
			<command name="list resources" code="RESORLST" description="return the list of the ids of the resources of the specified type stored in the specified file">
				<direct-parameter type="type" description="type of desired resources"/>
				<parameter name="from" code="KRFI" type="file specification" description="file to read from"/>
				<result type="anything" description="the list of ids"/>
			</command>
			<command name="get resource name" code="RESORGNA" description="return the name of the resource of the specified type and id from the specified file">
				<direct-parameter type="integer" description="index of the desired resource"/>
				<parameter name="type" code="KRTY" type="type" description="type of the desired resource"/>
				<parameter name="from" code="KRFI" type="file specification" description="file to read from"/>
				<result type="string" description="the name of the resource"/>
			</command>
			<!--command name="put resource" code="RESORPUT" description="write the given resource to the specified file with specified type and id">
				<direct-parameter type="anything" description="the AppleScript data that will be stored in the resource"/>
				<parameter name="to" code="KRFI" type="file specification" description="the destination file"/>
				<parameter name="type" code="KRTY" type="type" description="the resource type"/>
				<parameter name="index" code="KRIN" type="integer" description="the resource id"/>
				<parameter name="with name" code="KRNM" type="string" optional="yes" description="the resource name"/>
			</command-->
  </suite>
 
 <suite name="Mathematical Functions" code="MATH" description="Some mathematical functions. Most functions support as their direct parameter (and return) a list or an array of real. Notice: you may need more parentheses than is intuitive. Ex: cos(a) - b returns cos(a - b), so you may want to write (cos(a)) - b.">
			<command name="abs" code="MATHABS " description="absolute value of direct parameter ">
				<direct-parameter type="real"/>
				<result type="real"/>
			</command>
			<command name="acos" code="MATHACOS" description="arc cosine of direct parameter ">
				<direct-parameter type="real" description="-1 &lt;= x &lt;= 1"/>
				<result type="real" description="in radians"/>
			</command>
			<command name="acosh" code="MATHACOH" description="hyperbolic arc cosine of direct parameter">
				<direct-parameter type="real" description="a positive number"/>
				<result type="real"/>
			</command>
			<command name="asin" code="MATHASIN" description="arc sine of direct parameter">
				<direct-parameter type="real" description="-1 &lt;= x &lt;= 1"/>
				<result type="real" description="in radians"/>
			</command>
			<command name="asinh" code="MATHASIH" description="hyperbolic arc sine of direct parameter">
				<direct-parameter type="real"/>
				<result type="real"/>
			</command>
			<command name="atan" code="MATHATAN" description="arc tangent of direct parameter">
				<direct-parameter type="real"/>
				<result type="real" description="in radians"/>
			</command>
			<command name="atan2" code="MATHATA2" description="the angle of the line whose direction is the vector (x , y)">
				<direct-parameter type="list of real" description="2 real numbers : y (ordinate) and x (abscissa)"/>
				<result type="real" description="in radians"/>
			</command>
			<command name="atanh" code="MATHATAH" description="hyperbolic arc tangent of direct parameter">
				<direct-parameter type="real" description="-1 &lt; x &lt; 1"/>
				<result type="real"/>
			</command>
			<command name="ceil" code="MATHCEIL" description="round up">
				<direct-parameter type="real"/>
				<result type="real"/>
			</command>
			<command name="cosh" code="MATHCOSH" description="hyperbolic cosine of direct parameter">
				<direct-parameter type="real"/>
				<result type="real"/>
			</command>
			<command name="cos" code="MATHCOSI" description="cosine of direct parameter">
				<direct-parameter type="real" description="the angle (in radians). If the angle is in degrees, multiply it by pi / 180 before taking the cosine."/>
				<result type="real"/>
			</command>
			<command name="erf" code="MATHERF " description="the error function">
				<direct-parameter type="real"/>
				<result type="real"/>
			</command>
			<command name="erfc" code="MATHERFC" description="the complementary error function">
				<direct-parameter type="real"/>
				<result type="real"/>
			</command>
			<command name="exp" code="MATHEXP " description="exponential of direct parameter">
				<direct-parameter type="real"/>
				<result type="real"/>
			</command>
			<command name="floor" code="MATHFLOO"  description="round down">
				<direct-parameter type="real"/>
				<result type="real"/>
			</command>
			<command name="gamma" code="MATHGAMM" description="the gamma function">
				<direct-parameter type="real" description="a positive number"/>
				<result type="real"/>
			</command>
			<command name="hypot" code="MATHHYPO" description="the square root of the sum of the squares of its arguments">
				<direct-parameter type="list of real" description="2 real numbers"/>
				<result type="real"/>
			</command>
			<command name="lgamma" code="MATHLGAM" description="base-e logarithm of the absolute value of gamma">
				<direct-parameter type="real" description="a positive number"/>
				<result type="real"/>
			</command>
			<command name="ln" code="MATHLN  " description="base-e logarithm of direct parameter">
				<direct-parameter type="real" description="a positive real"/>
				<result type="real"/>
			</command>
			<command name="log10" code="MATHLOG " description="decimal logarithm of direct parameter">
				<direct-parameter type="real" description="a positive real"/>
				<result type="real"/>
			</command>
			<command name="sin" code="MATHSINE" description="sine of direct parameter">
				<direct-parameter type="real" description="the angle (in radians)"/>
				<result type="real"/>
			</command>
			<command name="sinh" code="MATHSINH" description="hyperbolic sine of direct parameter">
				<direct-parameter type="real"/>
				<result type="real"/>
			</command>
			<command name="sqr" code="MATHSQR " description="square of direct parameter">
				<direct-parameter type="real"/>
				<result type="real"/>
			</command>
			<command name="sqrt" code="MATHSQRT" description="square root of direct parameter">
				<direct-parameter type="real" description="a positive number"/>
				<result type="real"/>
			</command>
			<command name="tan" code="MATHTANG" description="tangent of direct parameter">
				<direct-parameter type="real" description="the angle (in radians)"/>
				<result type="real"/>
			</command>
			<command name="tanh" code="MATHTANH" description="hyperbolic tangent of direct parameter">
				<direct-parameter type="real"/>
				<result type="real"/>
			</command>
			<command name="trunc" code="MATHTRUN"  description="round toward zero">
				<direct-parameter type="real"/>
				<result type="real"/>
			</command>
	</suite>

<suite name="Arrays" code="ARRA" description="">
		<value-type name="array of real" code="Lido" plural="arrays of real" description="a packed list of real. Can be coerced to an AppleScript list with &quot;as list of real&quot; or &quot;as list of integer&quot;. Conversely, a list of real may be translated using &quot;as array of real&quot; for fast computation.">
<documentation>
<html>
<div style="display:none" class="example">
<div class="example-source">
set a to {1,2,3} as array of real
-- «data Lido4E6F74206120...»

a as list of real
-- {1.0, 2.0, 3.0}
</div>
</div>
</html>
</documentation>
		</value-type>
		<record-type name="matrix" code="Matr" description="An AppleScript representation of a 2D array of real numbers as a record:">
				<property name="ncols" code="ncol" type="integer" description="the number of columns"/>
				<property name="nrows" code="nrow" type="integer" description="the number of rows"/>
				<property name="array of real" code="Lido" type="array of real" description="the data, as an array of real or as a standard AppleScript list of real numbers. Ordering: the first numbers are the data for the first row."/>
<documentation>
<html>
<div style="display:none" class="example">
<div class="example-source">
set m to {class:matrix, ncols:10, nrows:3, array of real:(createarray 3 * 10)}
</div>
</div>
</html>
</documentation>
		</record-type>
      <value-type name="list of real" code="LiDo" description="an abstract type provided to coerce arrays of real into list of real" plural="list of real"/>
      <value-type name="list of integer" code="LiIn" description="an abstract type provided to coerce arrays of real into list of integer" plural="list of integer"/>
	      <value-type name="polynomial" code="Poly" description="list of its coefficients, 0th degree first. Supports &quot;as string&quot; and &quot;as list of real&quot; coercions.">
	<responds-to command="addlist"/>
	<responds-to command="sublist"/>
	<responds-to command="multlist"/>
	<responds-to command="divlist"/>
	<responds-to command="evalpolynomial"/>
	<responds-to command="composepolynomial"/>
	<responds-to command="fitpolynomial"/>
	</value-type>
		<record-type name="fitrecord" code="FRec" description="result of &quot;fitpolynomial&quot;">
			<property name="fit error" code="Ferr" type="real" description="the mean error"/>
			<property name="fit result" code="FRes" type="anything" description="the list of the coefficients (constant term first)"/>
			<property name="fit string" code="FStr" type="string" description="the polynomial formula as text"/>
		</record-type>
		<record-type name="statsrecord" code="SRec" description="result of &quot;statlist&quot;">
			<property name="maximum" code="MAX " type="real"/>
			<property name="minimum" code="MIN " type="real"/>
			<property name="sum" code="SUM " type="real"/>
			<property name="mean" code="MEAN" type="real"/>
			<property name="variance" code="Sigm" type="real"/>
			<property name="stdev" code="StDe" type="real"/>
			<property name="median" code="MEDI" type="real"/>
			<property name="skewness" code="Skew" type="real"/>
			<property name="kurtosis" code="Krts" type="real"/>
			<property name="maximum index" code="MAXi"  type="integer"/>
			<property name="minimum index" code="MINi"  type="integer"/>
		</record-type>
			<command name="createarray" code="SATICRAR" description="create an array of real ">
				<direct-parameter type="integer" description="the requested size of the array"/>
				<parameter name="range" code="rang" type="list of real"  optional="yes" description="{min,max}"/>
				<result type="array of real"/>
<documentation>
<html>
<div style="display:none" class="example">
<div class="example-source">
set x to createarray 10 range {2, 3}
-- «data Lido4E6F74206120...»

</div>
</div>
</html>
</documentation>
			</command>
			<command name="creatematrix" code="SATICRMT" description="create an array of real of size ncols*nrows ">
				<direct-parameter type="string" description="&quot;1&quot;: array of 1.0, &quot;x&quot;: array of x values, &quot;y&quot;: array of y values, &quot;d&quot;: diagonal square matrix"/>
				<parameter name="ncols" code="ncol" type="integer" description="or a list of real with the &quot;x&quot; option, will make an array with identical rows"/>
				<parameter name="nrows" code="nrow" type="integer" description="or a list of real with the &quot;y&quot; option, will make an array with identical columns"/>
				<parameter name="range" code="rang" type="list of real"  optional="yes" description="a range {min,max} for the &quot;x&quot; and &quot;y&quot; options"/>
				<parameter name="diagonal" code="Diag" type="array of real"  optional="yes" description="the diagonal values for the &quot;d&quot; option. You can also provide a real, in which case the matrix dimensions are specified by ncols=nrows. Default: 1.0 (identity matrix)."/>
				<parameter name="as" code="rtyp" type="type"  optional="yes"  description="array of real or matrix, default: array of real"/>
				<result type="array of real" description="or matrix"/>
<documentation>
<html>
<div style="display:none" class="example">
<div class="example-source">
set x to creatematrix "x" ncols 12 nrows 15
--result is an array of real:  «data Lido4E6F74206120...»

set m to creatematrix "x" ncols 12 nrows 15 as matrix
--result is a matrix: {class:matrix, ncols:12, nrows:15, array of real:«data Lido4E6F74206120...»}

display (creatematrix "d" diagonal {1, 3, 5, 7, 9} as matrix)
-- "1.0000000	0.0	0.0	0.0	0.0
0.0	3.0000000	0.0	0.0	0.0
0.0	0.0	5.0000000	0.0	0.0
0.0	0.0	0.0	7.0000000	0.0
0.0	0.0	0.0	0.0	9.0000000"

set a to createarray 5 range {-1, 1}
display (creatematrix "x" ncols a nrows 3 as matrix)
-- "-1.0000000	-0.50000000	0.0	0.50000000	1.0000000
-1.0000000	-0.50000000	0.0	0.50000000	1.0000000
-1.0000000	-0.50000000	0.0	0.50000000	1.0000000"

set a to createarray 4 range {0, 1}
display (creatematrix "y" ncols 3 nrows a as matrix)
-- "0.0	0.0	0.0
0.33333333	0.33333333	0.33333333
0.66666667	0.66666667	0.66666667
1.0000000	1.0000000	1.0000000"
</div>
</div>
</html>
</documentation>
			</command>
			<command name="randomarray" code="SATICRRA" description="create a random array of real">
				<direct-parameter type="integer" description="the requested size of the array"/>
				<parameter name="range" code="rang" type="list of real"  optional="yes" description="{min,max}"/>
				<parameter name="seed" code="seed" type="integer"  optional="yes"/>
				<result type="array of real"/>
<documentation>
<html>
<div style="display:none" class="example">
<div class="example-source">
set x to randomarray 10 range {2, 3} seed 12345
-- «data Lido4E6F74206120...»

</div>
</div>
</html>
</documentation>
			</command>
			<command name="replacemissingvalue" code="SATIFILL" description="replace missing values (or NaN's) in a list, or an array of real, or a list of such.">
				<direct-parameter type="array of real" description="or a list of arrays"/>
				<parameter name="with" code="with" type="real"/>
				<result type="array of real" description="or a list of arrays"/>
<documentation>
<html>
<div style="display:none" class="example">
<div class="example-source">
set x to divlist 1 with ({-2, -1, 0, 1, 2} as array of real)
set xx to replacemissingvalue x with "999"
display xx
-- "-0.50000000	-1.0000000	999.00000	1.0000000	0.50000000"
</div>
</div>
</html>
</documentation>
			</command>
			<command name="removemissingvalue" code="SATIRmMv" description="delete missing values (or NaN's)from a list or an array of real">
				<direct-parameter description="">
				<type type="list"/>
				<type type="array of real"/>
				</direct-parameter>
				<result description="">
					<type type="list"/>
				</result>
			</command>
			<command name="extractitem" code="SATIEXLF" description="(obsolete: use extractarray instead)">
				<direct-parameter type="integer" description=""/>
				<parameter name="thru" code="thru" type="integer" optional="yes" description="" />
				<parameter name="step" code="step" type="integer" optional="yes" description=""/>
				<parameter name="in" code="in  " type="array of real"/>
				<parameter name="blocksize" code="bloc" type="integer" optional="yes" description=""/>
				<parameter name="as" code="rtyp" type="type" optional="yes" description=""/>
				<result type="array of real"/>
			</command>
			<command name="extractarray" code="SATIExLF" description="extract values from an array of real">
				<direct-parameter type="array of real"/>
				<parameter name="at" code="at  " type="integer" optional="yes" description="the first item to read or a list of indexes (in which case, the &quot;for&quot;, &quot;step&quot; and &quot;blocksize&quot; parameters are not taken into account). 1-based. Default 1"/>
				<parameter name="for" code="for " type="integer" optional="yes" description="the number of blocks to read. If &lt;0 then read as many blocks as possible. Default 1. Pass -1 in order to extract all available values"/>
				<parameter name="blocksize" code="bloc" type="integer" optional="yes" description="size of the block to read at each step. blocksize must be smaller than step"/>
				<parameter name="step" code="step" type="integer" optional="yes" description="the interval between the beginnings of successive blocks to read. Must be larger than blocksize. Default: blocksize"/>
				<parameter name="as" code="rtyp" type="type" optional="yes" description="default is array of real, you can provide small real or real for 1 item"/>
				<result type="array of real"/>
<documentation>
<html>
<div style="display:none" class="example">
<div class="example-source">
set a to createarray 50
a as list of real
-- {0.0, 1.0, 2.0, 3.0, 4.0, 5.0, ...}
set b to extractarray a for 3 at 1 step 10 blocksize 2
b as list of real
-- {0.0, 1.0, 10.0, 11.0, 20.0, 21.0}
</div>
</div>
</html>
</documentation>
			</command>
			<command name="changearray" code="SATISeLF" description="change items in an array of real">
				<direct-parameter type="array of real" description="the array to modify"/>
				<parameter name="at" code="at  " type="integer" optional="yes" description="the index of the first item to change (1 based) or a list of indexes (in which case, the &quot;step&quot; and &quot;blocksize&quot; parameters are not taken into account). default: 1"/>
				<parameter name="into" code="into" type="array of real" description="the new values"/>
				<parameter name="blocksize" code="bloc" type="integer" optional="yes" description="size of the blocks to copy at each step. The &quot;into&quot; parameter must have a size multiple of blocksize. Default: 1"/>
				<parameter name="step" code="step" type="integer" optional="yes" description="the interval between the beginnings of successive blocks to write. Must be larger than blocksize. Default: blocksize"/>
				<result type="array of real"/>
<documentation>
<html>
<div style="display:none" class="example">
<div class="example-source">
set a to createarray 50
set b to changearray a at 1 step 10 blocksize 2 into (createarray 6 range {-99, -99})
b as list of real
-- {-99.0, -99.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, -99.0, -99.0, 12.0, 13.0, 14.0, ...}

</div>
</div>
</html>
</documentation>
			</command>
			<command name="insertarray" code="SATIInLF" description="insert items into an array of real">
				<direct-parameter type="array of real" description="the values to insert"/>
				<parameter name="into" code="into" type="array of real" description="the array to modify"/>
				<parameter name="at" code="at  " type="integer" optional="yes" description="the index of the first item to insert (0: at the beginning) or a list of indexes of the same size as the direct parameter (in which case, the &quot;for&quot;, &quot;step&quot; and &quot;blocksize&quot; parameters are not taken into account). default -1 (insert values at the end)"/>
				<parameter name="for" code="for " type="integer" optional="yes" description="number of blocks to insert. default 1"/>
				<parameter name="step" code="step" type="integer" optional="yes" description="the number of values between each insertion. default 0"/>
				<parameter name="blocksize" code="bloc" type="integer" optional="yes" description="size of the blocks to insert after each step. The direct parameter must have a size multiple of blocksize. Default: 1 if &quot;for&quot; is defined, else the size of the direct parameter."/>
				<result type="array of real"/>
<documentation>
<html>
<div style="display:none" class="example">
<div class="example-source">
set a to createarray 30
set b to createarray 10 range {-10, -1}
set c to insertarray b blocksize 2 into a step 5 at 1 for 3
c as list of real
-- {0.0, -10.0, -9.0, 1.0, 2.0, 3.0, 4.0, 5.0, -8.0, -7.0, 6.0, 7.0, 8.0, 9.0, 10.0, -6.0, -5.0, 11.0, 12.0, ...}
</div>
</div>
</html>
</documentation>
			</command>
			<command name="resamplematrix" code="SATIReMa" description="resample a matrix. The incoming matrix is divided into rectangular blocks. Each block may be replaced by its mean value or by another statistical value.">
				<direct-parameter type="matrix" description="the matrix to resample"/>
				<parameter name="blocksize" code="bloc" type="list of integer" description="{i,j}, defines the horizontal and vertical sizes of the blocks used for resampling. i and j may be integers (identical blocks) or lists of integers (irregular grid, the items of the lists define the successive sizes of the blocks)."/>
				<parameter name="wanted" code="WANT" type="string" optional="yes" description="the following strings or a list of such: &quot;mean&quot;, &quot;minimum&quot;, &quot;maximum&quot;, &quot;stdev&quot;, &quot;missing value&quot;, &quot;sum&quot;, &quot;median&quot;, &quot;dispersion&quot;. Specify the statistical function computed on each block. Default: &quot;mean&quot;."/>
				<result type="matrix" description="the resampled matrix, or a list of matrices if 'wanted' is a list. The dimensions of the resampled matrix correspond to the numbers of blocks defined with 'blocksize'."/>
<documentation>
<html>
<div style="display:none" class="example">
<div class="example-source">
set m to ArrayToMatrix(randomarray 10 * 9, 10, 9) -- a 10x9 random matrix
set {m1, m2} to resamplematrix m blocksize {5, 3} wanted {"mean", "stdev"}
-- result is a list of two 2x3 matrices
</div>
</div>
</html>
</documentation>
			</command>
			<command name="reversearray" code="SATILiRe" description="returns reverse of the direct parameter.">
				<direct-parameter type="list of real" description="... or an array of real"/>
				<result type="array of real"/>
<documentation>
<html>
<div style="display:none" class="example">
<div class="example-source">
(reversearray {1, 2, 3}) as list of real
-- {3.0, 2.0, 1.0}
</div>
</div>
</html>
</documentation>
			</command>
			<command name="multlist" code="SATILST*" description="performs the product of the parameters. Each parameter may be a list, an array of real, a matrix or a number. multlist {x1,x2...} with {y1,y2...} returns {x1.y1, x2.y2, ...}; multlist x with {y1,y2...} returns {x.y1, x.y2, ...}">
				<direct-parameter type="list of real"/>
				<parameter name="with" code="with" type="list of real"/>
				<result type="list of real"/>
			</command>
			<command name="divlist" code="SATILST/" description="same as multlist, but for quotient">
				<direct-parameter type="list of real"/>
				<parameter name="with" code="with" type="list of real"/>
				<result type="list of real"/>
			</command>
			<command name="addlist" code="SATILST+" description="same as multlist, but for sums">
				<direct-parameter type="list of real"/>
				<parameter name="with" code="with" type="list of real"/>
				<result type="list of real"/>
			</command>
			<command name="sublist" code="SATILST-" description="same as multlist, but for subtraction">
				<direct-parameter type="list of real"/>
				<parameter name="with" code="with" type="list of real"/>
				<result type="list of real"/>
			</command>
			<command name="runningsum" code="SATIRSum" description="returns the running sum of an array of real">
				<direct-parameter type="array of real"/>
				<result type="array of real"/>
<documentation>
<html>
<div style="display:none" class="example">
<div class="example-source">
(runningsum {1, 2, 3, 4}) as list of real
-- {1.0, 3.0, 6.0, 10.0}
</div>
</div>
</html>
</documentation>
			</command>
			<command name="statlist" code="SATIStat" description="returns as a record the min, max, min index, max index, mean, sum, standard deviation, variance.">
				<direct-parameter type="list of real" description="... or an array of real"/>
				<parameter name="kurtosis" code="Krts" type="boolean" optional="yes" description="if true, statlist compute also skewness, kurtosis and median calculations."/>
				<result type="statsrecord"/>
<documentation>
<html>
<div style="display:none" class="example">
<div class="example-source">
set stl to statlist (randomarray 100) with kurtosis
-- {maximum:0.993787646526, maximum index:60, minimum:0.001816140488, minimum index:31, sum:45.616940173553,
 mean:0.456169401736, variance:0.071985153475, stdev:0.268300491007, missing value:0, skewness:0.100799135751,
 kurtosis:1.791678255678, median:0.45719872578}
mean of stl
-- 0.456169401736
</div>
</div>
</html>
</documentation>
			</command>
			<command name="histogram" code="SATIHisT" description="given an array of real numbers, return a list of 2 arrays : {sampling values,frequencies}">
				<direct-parameter type="array of real"/>
				<parameter name="samples" code="samp" type="integer" optional="yes" description="number of intervals. If the parameter is missing  histogram builds a raw histogram {sampling values,frequencies}"/>
				<parameter name="minimum" code="MIN " type="real" optional="yes" description="lower bound of the intervals"/>
				<parameter name="maximum" code="MAX " type="real" optional="yes" description="upper bound of the intervals"/>
				<result type="list of array of real" description="{sampling values,frequencies}"/>

<documentation>
<html>
<div style="display:none" class="example">
<div class="example-source">
set {x, y} to histogram (randomarray 100 range {1, 10}) samples 10
set c to QuickCurve(x, y, 0)
set properties of c to {pattern style:10, line style:0, histogram bar width:0.75}
set limits of container of c to {0, 11, 0, 20}
draw window of c
</div>
</div>
</html>
</documentation>
			</command>
			<command name="evalformula" code="SATILSOP" description="apply C-like mathematical expressions to arrays of real. Ex: evalformula &quot;a*x^2+y^2&quot; with {&quot;a&quot;,2.4,&quot;x&quot;,anarray,&quot;y&quot;,anotherarray} (or by using a record: evalformula &quot;a*x^2+y^2&quot; with {a:2.4,x:anarray,y:anotherarray})">
				<direct-parameter type="string" description="the formula to compute"/>
				<parameter name="with" code="with" description="the definition of the variables occurring in the formula. If a list, an alternation of reference names (strings) and data (number, list of numbers or array of real). Prefer lists because you can't use reserved words with records.">
					<type type="list"/>
					<type type="record"/>
				</parameter>
				<parameter name="as" code="rtyp" type="type" description="matrix or array of real: the requested type if parameters are matrices. Default: array of real"/>
				<result type="array of real" description="or real"/>
<documentation>
<html>
<div style="display:none" class="example">
<div class="example-source">
set a to createarray 10000 range {0, 2*pi} 
set s2 to evalformula "2*cos(x)*sin(x)" with {"x", a}

evalformula ("atan2(y,x)") with {y:sqrt (3), x:1}
-- 1.047197551197 (that is, pi/3)

evalformula ("norm(cos(x))/sqrt(count(x))") with {"x", randomarray 10000 range {0, 2 * pi}}
-- 0.701118610115 (that is, ~1/sqrt(2))

set n1 to 100
set x1 to creatematrix "x" ncols n1 nrows n1 range {-1, 1} as matrix
set y1 to creatematrix "y" ncols n1 nrows n1 range {-1, 1} as matrix
set {px, py} to {1,0}
set pot1 to evalformula "r=hypot(x,y);//comments
(px*x+py*y)/(r*r*r)" with {&quot;px&quot;,px, &quot;py&quot;,py, &quot;x&quot;,x1, &quot;y&quot;,y1} as matrix
set s to QuickScalarMap(0, 0, pot1, 0)
set limits of s to {-10, 10}
draw window of s
</div>
</div>
<br/>
<div>
<b>Discussion</b>
<ul><li>
The expression of <span class="example-source">evalformula</span> may include logical operators, yet all values remain real numbers: <span class="example-source">true</span> expressions evaluate to <span class="example-source">1.0</span>, <span class="example-source">false</span> expressions evaluate to <span class="example-source">0.0</span>. Conversely when implied in a logical expression any non null number is considered as <span class="example-source">true</span> (<span class="example-source">1.0</span>). 
</li><li>
The direct parameter of <span class="example-source">evalformula</span> may be a sequence of elementary expressions, provided they are separated with semi-colon <span class="example-source">;</span>. You can also use <span class="example-source">return</span> as the separator, so in complex cases when the expression may require several intermediate steps you can easily use the contents of a text window as the expression. When you use such a composite construct <span class="example-source">evalformula</span> will return the result of the last (rightmost) expression.
</li><li>
Instead of one expression you can pass a list of expressions to <span class="example-source">evalformula</span>: <span class="example-source">evalformula</span> will return a list of <span class="example-source">arrays of real</span>.
</li><li>
Here is the list of the operators and functions that <span class="example-source">evalformula</span> supports.
<dl><dt><b>operators (higher precedence first)</b></dt><dd><ul><li><span class="example-source">-</span> (unary)
</li><li><span class="example-source">* /</span>, <span class="example-source">+ -</span>, <span class="example-source">^</span> (exponentiation)
</li><li><span class="example-source">&gt;= &gt; &lt;= &lt;</span><span class="example-source">== !=</span> (equal - not equal), <span class="example-source">&amp;</span> (logical AND), <span class="example-source">|</span> (logical OR), <span class="example-source">!</span> (boolean not, evaluates to 1 if the operand is 0 and to 0 otherwise).
</li></ul></dd><dt><b>algebra</b></dt><dd><ul><li><span class="example-source">cbrt</span>, <span class="example-source">sqr</span>, <span class="example-source">sqrt</span>, <span class="example-source">hypot</span>, <span class="example-source">pow</span>, <span class="example-source">sign</span></li><li><span class="example-source">abs</span>, <span class="example-source">ceil</span>, <span class="example-source">floor</span>, <span class="example-source">trunc</span>, <span class="example-source">max</span>, <span class="example-source">min</span></li><li><span class="example-source">mod</span> (modulo), <span class="example-source">remainder</span>
</li><li><span class="example-source">isnan</span> (test whether the quantity is a ``NAN''. NAN = Not A Number.)
</li><li><span class="example-source">replacenan</span> replacenan(x,y) return the array x where all nan's have been replaced by y.
</li></ul></dd><dt><b>transcendental</b></dt><dd><ul><li><span class="example-source">ln</span> or <span class="example-source">log</span> (neperian), <span class="example-source">log10</span>, <span class="example-source">log1p</span>, <span class="example-source">exp</span>, <span class="example-source">expm1</span>
</li><li><span class="example-source">cos</span>, <span class="example-source">sin</span>, <span class="example-source">tan</span>, <span class="example-source">acos</span>, <span class="example-source">asin</span>, <span class="example-source">atan</span>, <span class="example-source">atan2</span> (atan2(y,x))</li><li><span class="example-source">cosh</span>, <span class="example-source">sinh</span>, <span class="example-source">tanh</span>, <span class="example-source">acosh</span>, <span class="example-source">asinh</span>, <span class="example-source">atanh</span></li><li><span class="example-source">erf</span>, <span class="example-source">erfc</span>, <span class="example-source">gamma</span>, <span class="example-source">lgamma</span></li>
<li><span class="example-source">j0</span>, <span class="example-source">j1</span>, <span class="example-source">jn</span>, <span class="example-source">y0</span>, <span class="example-source">y1</span>, <span class="example-source">yn</span></li>
<li><span class="example-source">EllipticE</span>, <span class="example-source">EllipticK</span>, <span class="example-source">IncEllipticE</span>, <span class="example-source">IncEllipticF</span>, <span class="example-source">EllipticP</span>, <span class="example-source">IncEllipticP</span> (<a href="https://www.gnu.org/software/gsl/manual/html_node/Definition-of-Legendre-Forms.html#Definition-of-Legendre-Forms" target="_blank" >GSL</a>)</li>
<li><span class="example-source">lambertW0</span>, <span class="example-source">lambertWm1</span> (<a  target="_blank" href="https://www.gnu.org/software/gsl/manual/html_node/Lambert-W-Functions.html">GSL</a>)</li>
</ul></dd><dt><b>
functions on arrays
</b></dt><dd><ul><li><span class="example-source">norm</span> and <span class="example-source">norm2</span>, respectively the euclidian norm and its square (numbers),
</li><li><span class="example-source">sum</span> and <span class="example-source">runsum</span>, respectively the sum (a number) and the running sum (an array),
</li><li><span class="example-source">diff</span>, diff(x) array of length (length of x) -1. diff(x)[n]=x[n+1]-x[n].
</li><li><span class="example-source">int</span>, int(f,x) return the integral ∫fdx
</li>
<li><span class="example-source">count</span>, the number of elements (a number).
</li>
<li><span class="example-source">rest</span>, rest of a list (as in AppleScript), <span class="example-source">butlast</span>
</li>
<li><span class="example-source">concat</span>, concat(x,y) array of length (length of x +length y) .
</li>
</ul></dd></dl>
</li></ul>
</div>
</html>
</documentation>
			</command>
			<command name="maskarray" code="SATIMASK" description="suppress items (or rows) out of an array of real (or a matrix) with respect to a mask of 0's and 1's.">
				<direct-parameter type="array of real" description="the array(s) or matrix to be filtered. For a matrix, the rows are deleted."/>
				<parameter name="with" code="with" type="array of real" description="the filter: an array of real, 0's mean that the corresponding items are to be deleted in the direct object(s)."/>
				<result type="array of real" description="the resulting array(s) or matrix"/>
<documentation>
<html>
<div style="display:none" class="example">
<div class="example-source">
set x to randomarray 10 range {1, 2}
set m to evalformula "(x&lt;1.2)|(x&gt;1.5)" with {x:x}
set y to maskarray x with m
count y
-- 6
</div>
</div>
</html>
</documentation>
			</command>
			<command name="listvariables" code="SATILSOv" hidden="yes" description="">
				<direct-parameter type="string" description="a formula"/>
				<result description="the list of all input variables of the direct formula">
				<type type="string" list="yes"/>
				</result>
			</command>
			<command name="smootharray" code="SATISmoA" hidden="yes" description="smooth an array by applying a [1 2 1] filter. First and last value are left unchanged.">
				<direct-parameter type="array of real"/>
				<parameter name="for" code="for " type="integer" description="how many times the smooth is applied"/>
				<result type="array of real" description="the smoothed array. It has the same size as the direct parameter"/>
			</command>
			<command name="filter" code="SATIBLUR">
				<direct-parameter type="matrix"/>
				<parameter name="using" code="with" type="array of real" description="a list of 9 real numbers representing the 3x3 convolution matrix"/>
				<parameter name="reduced" code="redu" type="boolean" optional="yes" description="the resulting matrix is smaller (the 2 extremal columns and rows are removed. Default true.)"/>
				<result type="matrix"/>
			</command>
			<command name="evalpolynomial" code="SATIEvPo" description="">
				<direct-parameter type="list of real" description="the polynomial, given as the list of its coefficients, 0th degree (constant term) first. Or an array of real coerced with &quot;as polynomial&quot;"/>
				<parameter name="at" code="at  " type="real" description="or array of real"/>
				<result type="real" description=""/>
<documentation>
<html>
<div style="display:none" class="example">
<div class="example-source">
set x to runningsum (randomarray 10)
set y to runningsum x
set p to fitpolynomial {x, y} degree 3
evalpolynomial (fit result of p) at 1
-- 2.364091741891

</div>
</div>
</html>
</documentation>
			</command>
			<command name="roots of" code="SATIRoot">
				<direct-parameter type="list of real" description="the polynomial, given as the list of its coefficients, 0th degree (constant term) first"/>
				<parameter name="complex" code="Comp" type="boolean" optional="yes" description="default : false. Also compute the complex roots"/>
				<result type="list of real" description="roots of the polynomial. Complex roots are returned as a list of 2 real numbers"/>
<documentation>
<html>
<div style="display:none" class="example">
<div class="example-source">
set x to runningsum (randomarray 10)
set y to runningsum x
set p to fit result of (fitpolynomial {x, y} degree 3)
set {xx} to roots of p
evalpolynomial p at xx
-- -5.6843418860808E-14

</div>
</div>
</html>
</documentation>
			</command>
			<command name="composepolynomial" code="SATICoPo" description="you can provide arrays of real instead of polynomials">
				<direct-parameter type="polynomial" description="or an array of real: the polynomial P(X), given as the list of its coefficients, 0th degree (constant term) first."/>
				<parameter name="with" code="with" type="polynomial" description="Q(X)"/>
				<result type="polynomial" description="P(Q(X))"/>
			</command>
			<command name="pade approximant" code="SATIPade" description="given a polynomial P(X), compute the Padé approximant as the rational function NUM(X)/DEN(X). NUM and DEN are polynomials and the constant term of DEN is 1.">
				<synonym name="pade"/>
				<direct-parameter type="polynomial" description="or an array of real: the polynomial P(X), given as the list of its coefficients, 0th degree (constant term) first."/>
				<parameter name="numerator" code="nume" type="integer" description="the requested degree for NUM(X)"/>
				<parameter name="denominator" code="deno" type="integer" description="the requested degree for DEN(X)"/>
				<result description="{NUM(X), DEN(X)}">
				<type type="polynomial" list="yes"/>
				</result>
			</command>
			<command name="fitpolynomial" code="SATIFiPo" description="given two arrays of real {x,y} returns the best polynomial fit y=P(x)">
				<direct-parameter type="list of array of real" description="a list of two arrays of real {x,y}"/>
				<parameter name="degree" code="degr" type="integer" description="the degree of the resulting polynomial"/>
				<parameter name="number formatting" code="Form" type="string" optional="yes" description="the format string for the formula output. If you don't specify this parameter, no fit string will be provided in the result record."/>
				<parameter name="constraints" code="cons" optional="yes" description="a list of constraints. Each constraint is a list of  degree+2 real numbers (a0,a1..,b) ensuring an affine relation between the coefficient of the polynomial: a0*c0+..=b, where (c0,..) are the coefficients of the polynomial">
				<type type="list" list="yes"/>
				</parameter>
				<result type="fitrecord"/>
<documentation>
<html>
<div style="display:none" class="example">
<div class="example-source">
set x to runningsum (randomarray 10)
set y to runningsum x
fitpolynomial {x, y} degree 3 number formatting "%.3g"
-- {fit error:0.66209535022, fit result:{2.229178877341, -2.581992766564, 2.069751651722, -0.112828845472}, fit string:"2.23-2.58*x+2.07*x^2-0.113*x^3"}
</div>
</div>
</html>
</documentation>
			</command>
			<command name="fitrational" code="SATIRatF" description="given two arrays of real {x,y} returns the best rational fit y=NUM(x)/DEN(x). NUM and DEN are polynomials and the constant term of DEN is 1.">
				<direct-parameter type="list of array of real" description="a list of two arrays of real {x,y}"/>
				<parameter name="numerator" code="nume" type="integer" description="the requested degree for NUM(X)"/>
				<parameter name="denominator" code="deno" type="integer" description="the requested degree for DEN(X)"/>
				<parameter name="number formatting" code="Form" type="string" optional="yes" description="the format string for the formula output. If you don't specify this parameter, no fit string will be provided in the result record."/>
				<result type="fitrecord" description="where fit result if a list of 2 polynomials."/>
			</command>
			<command name="read binary" code="SATIRdBF" description="read a file of real or small real">
				<direct-parameter type="file specification" description="the file"/>
				<parameter name="as" code="rtyp" type="type" description="the format of the data file: real (8 bytes), small real (4 bytes), integer (4 bytes), small integer (2 bytes), or byte (1 byte)"/>
				<parameter name="skip" code="skip" type="integer" optional="yes" description="the number of leading bytes to skip"/>
				<parameter name="step" code="jump" type="integer" optional="yes" description="the offset between two consecutive readings"/>
				<parameter name="blocksize" code="bloc" type="integer" optional="yes" description="the size of the blocks in the &quot;as&quot; unit. Default 1"/>
				<parameter name="length" code="for " type="integer" optional="yes" description="the number of blocks to read"/>
				<parameter name="big endian" code="Endi" type="boolean" optional="yes" description="is the file encoded as big endian or little endian? Default: system endianess (false on mac intel)."/>
				<parameter name="signed" code="Sign" type="boolean" optional="yes" description="Only for integer types. Are they signed or unsigned? Default: true."/>
				<result type="array of real"/>
			</command>
			<command name="write binary" code="SATIWrBF" description="write the data into a binary file (encoded as big endian)">
				<direct-parameter type="file specification" description="the file"/>
				<parameter name="with data" code="data" type="array of real"/>
				<parameter name="starting at" code="strt" type="integer" optional="yes" description="offset in bytes, default: append data at the end of the file"/>
				<parameter name="as" code="rtyp" type="type" optional="yes" description="the format of the data to be saved: real (8 bytes), small real (4 bytes), integer (4 bytes), small integer (2 bytes), or byte (1 byte). Default: real."/>
				<parameter name="big endian" code="Endi" type="boolean" optional="yes" description="is the file encoded as big endian or little endian? Default: system endianess (false on mac intel)."/>
			</command>
			<command name="find peaks" code="SATIPEAK" hidden="yes" description="Find the peaks (indexes of local min and max values) of an array of real. A minimum height of peaks can be provided.">
				<direct-parameter type="array of real" description="the input data"/>
				<parameter name="delta" code="Delt" type="real" description="the minimum height of a peak. Default:0.0"/>
				<parameter name="lookformaxfirst" code="LFMF" type="boolean" description="search a maximum first. Default true."/>
				<result description="{list of max's indices, list of min's indices}. Indices are 1-based. Use it with extractarray to get list of values.">
				<type type="integer" list="yes"/>
				</result>
			</command>
			<command name="arrays auto filling" code="SATIaDAL" hidden="yes" description="defines the behavior when two arrays of real should have the same length: O: fails if lengths are differents, 1: fills the shortest array with NaNs, -1: shrinks the largest array.">
				<direct-parameter type="integer" description="the new setting"/>
				<result type="integer" description="the previous setting"/>
			</command>
</suite>
  
  <suite name="Array and List Utilities" code="RESO" description="">
			<command name="sortlist" code="SATISort" description="sort a list of numbers (or an array of real) or a list of strings or a list of dates. Missing values of the input list are always returned at the end of the resulting list. Can also sort a list of lists: lists are sorted either asynchronously or synchronously if the 'with respect to' parameter is specified. Sortlist is stable.">
				<synonym name="sortarray"/>
				<direct-parameter description="the list to sort (or a list of lists)"><type type="anything" list="yes"/></direct-parameter>
				<parameter name="with respect to" code="from" type="integer" optional="yes" description="index of the list used as the sort criterion. Relevant only if the direct parameter is a list of lists: requests a synchronous sort. If this parameter is not specified, each list is sorted separately. This parameter may be a list of integer corresponding to a list of criteria in decreasing priority order. Of course, the lists that does not correspond to a criterium are reordered and do not need to be homogeneous"/>
				<parameter name="ascending" code="Asce" type="boolean" optional="yes" description="default true. May be a list if &quot;with respect to&quot; is already a list."/>
				<parameter name="remove duplicates" code="Uniq" type="boolean" optional="yes" description="if true, remove duplicate values. Default false"/>
				<parameter name="comparison" code="Cfla" type="integer" optional="yes" description="only relevant for list of string. 1 case insensitive, 2 compare numerically, 1+4 force ordering ('A'&lt;'a'&lt;'B'). Default 0"/>
				<result description="the sorted list (or lists)"><type type="anything" list="yes"/></result>
<documentation>
<html>
<div style="display:none" class="example">
<div class="example-source">
sortlist (randomarray 10)
-- «data Lido4E6F74206120...»
(sortlist {2, 5, 1, 3} without ascending) as list of real
-- {5.0, 3.0, 2.0, 1.0}
sortlist {"abc", "ABC", "xyz", "123"}
-- {"123", "ABC", "abc", "xyz"}
sortlist {{1, 2, 3, 4}, {"abc", "ABC", "xyz", "123"}, createarray 4, {{a:1}, "b", 3, {1, 2, 3}}} with respect to 2
-- {{4, 2, 1, 3}, {"123", "ABC", "abc", "xyz"}, «data Lido4E6F74206120...», {{1, 2, 3}, "b", {a:1}, 3}}
-- compare numerically:
sortlist {"a1", "a10", "a2", "1b", "10b", "2b"}
-- {"10b", "1b", "2b", "a1", "a10", "a2"}
sortlist {"a1", "a10", "a2", "1b", "10b", "2b"} comparison 2
-- {"1b", "2b", "10b", "a1", "a2", "a10"}
</div>
</div>
</html>
</documentation>
			</command>
			<command name="masklist" code="SATIMASk" description="suppress items out of a list (or replace items) with respect to a mask of 0's and 1's. See also 'suppress item'">
				<direct-parameter type="list of any" description="the list to be filtered."/>
				<parameter name="with" code="with" type="array of real" description="the filter: an array of real, or a list of integers, 0's mean that the corresponding items are to be deleted (or replaced if substitute is present) in the direct object(s)."/>
				<parameter name="substitute" code="Subs" optional="yes" type="any" description=""/>
				<result type="list of any" description="the resulting list"/>
<documentation>
<html>
<div style="display:none" class="example">
<div class="example-source">
masklist {"abc", {a:1}, "b", 3, {1, 2, 3}} with {1, 0, 1, 1, 0}
-- {"abc", "b", 3}
</div>
</div>
</html>
</documentation>
			</command>
			<command name="topological sort" code="SATITSrt" description="given a list of vertices and partial ordering providing provided by either the parameter edges or the parameter dependencies, topological sort returns a ordered list or an error if the ordering is not suitable">
				<direct-parameter optional="yes" description="the vertices. Optional with the edges parameter"><type type="integer" list="yes"/></direct-parameter>
				<parameter name="edges" code="edge" description="{{v1,v2},{v3,v4},..}. Each ordered pair corresponds to an oriented edge (that is v1&gt;v2). This parameter can also be provided as a list {v1,v2v3,v4,,..}" optional="yes" >
				<type type="list" list="yes"/> 
				</parameter>
				<parameter name="dependencies" code="depe" optional="yes" description="if there are n vertices, dependencies is a list of n list of vertices. The ith list contains the vertices known as larger that the ith vertex">
				<type type="list" list="yes"/> 
				</parameter>
				<result description="a ordered list of vertices {v1,v2,...}"><type type="integer" list="yes"/></result>
<documentation>
<html>
<div style="display:none" class="example">
<div class="example-source">topological sort edges {{13, 2}, {1, 13}, {24, 1}}
-- {24, 1, 13, 2}
</div>
</div>
</html>
</documentation>
			</command>
			<command name="suppress item" code="SATIDLKY" description="delete a list of items from a list or a record. ">
				<direct-parameter type="anything" description="a list of indices or a list of keywords. Use quotes around custom properties, and also around 4-characters codes. (If you don't know what this means, you don't need it)."/>
				<parameter name="from" code="from">
					<type type="list"/>
					<type type="record"/>
				</parameter>
				<result description="according to the &quot;from&quot; parameter">
					<type type="list"/>
					<type type="record"/>
				</result>
<documentation>
<html>
<div style="display:none" class="example">
<div class="example-source">
suppress item 2 from {"abc", {a:1}, "b", 3}
-- {"abc", "b", 3}

suppress item name from {path name:1, name:"abc"}
-- {path name:1}

suppress item {2, 3} from {"abc", {a:1}, "b", 3}
-- {"abc", 3}
</div>
</div>
</html>
</documentation>
			</command>
    <command name="exclude items" code="SATIEIFL" description="remove strings from a list of strings. A list equivalent of the set difference.">
      <direct-parameter description="the list of strings to remove from the input list">
         <type type="string" list="yes"/>
      </direct-parameter>
      <parameter name="from" code="from" description="the input list">
         <type type="string" list="yes"/>
      </parameter>
      <parameter name="with respect to" code="With" type="integer" optional="yes" description="rank of the list (of string) used for the filter process. Other input lists may be lists of anything. Relevant only if the 'from' parameter is a list of lists. Default: 1"/>
	<parameter name="case sensitive" code="CaSe" type="boolean" optional="yes" description="default true"/>
      <result type="list" description="the cleaned input list, or a list of cleaned lists if the 'from' parameter is a list of lists."/>
<documentation>
<html>
<div style="display:none" class="example">
<div class="example-source">
exclude items {"r", "t", "z"} from {"a", "z", "e", "r", "t", "y"}
  --  {"a", "e", "y"}

exclude items {"r", "t", "z"} from {{"a", "z", "e", "r", "t", "y"}, {1, 2, 3, 4, 5, 6}, {"one", "two", "three", "four", "five", "six"}}
  --  {{"a", "e", "y"}, {1, 3, 6}, {"one", "three", "six"}}
</div>
</div>
</html>
</documentation>
    </command>
    <command name="keep items" code="SATIKIFL" description="remove strings from a list of strings. A list equivalent of the set intersection.">
      <direct-parameter description="the list of the strings to keep">
         <type type="string" list="yes"/>
      </direct-parameter>
      <parameter name="from" code="from" description="(or list of list). The input list">
         <type type="string" list="yes"/>
      </parameter>
      <parameter name="with respect to" code="With" type="integer" optional="yes" description="rank of the list (of string) used for the filter process. Other input lists may be lists of anything. Relevant only if the 'from' parameter is a list of lists. Default: 1"/>
	<parameter name="case sensitive" code="CaSe" type="boolean" optional="yes" description="default true"/>
      <result type="list" description="the cleaned input list, or a list of cleaned lists if the 'from' parameter is a list of lists."/>
<documentation>
<html>
<div style="display:none" class="example">
<div class="example-source">
keep items {"r", "t", "z"} from {"a", "z", "e", "r", "t", "y"}
  --  {"z", "r", "t"}

keep items {"r", "t", "z"} from {{"a", "z", "e", "r", "t", "y"}, {1, 2, 3, 4, 5, 6}, {"one", "two", "three", "four", "five", "six"}}
  --  {{"z", "r", "t"}, {2, 4, 5}, {"two", "four", "five"}}
</div>
</div>
</html>
</documentation>
    </command>
			<command name="special concat" code="SATICONC" description="concatenate {a_ppty:X, …} and {a_ppty:Y, …} into {a_ppty:Z, …}, where Z is X &amp; Y (resp. X + Y) if X,Y are lists (resp. numbers). Also merges tabulated string arrays side to side (in other terms, adds columns).">
				<direct-parameter type="record" description="the record"/>
				<parameter name="with" code="with" type="record" description="the additional data"/>
				<result type="record"/>
<documentation>
<html>
<div style="display:none" class="example">
<div class="example-source">
special concat {a:1, b:{1}, c:"A", d:0} with {a:2, b:{2}, c:"B"}
-- {a:3.0, b:{1, 2}, c:"A", d:0}

special concat ("1" &amp; tab &amp; "2" &amp; return &amp; "A" &amp; tab &amp; "B") with ("3" &amp; return &amp; "C")
-- "1	2	3
A	B	C
"
</div>
</div>
</html>
</documentation>
			</command>
  </suite>
  
  
  <!-- XMLLib.sdef -->
  
  
  <suite name="Satimage XML DOM" code="XML " description="An AppleScript implementation of the DOM. Uses the Libxml2 open source project.">
    <class name="anything" code="****" description="any class or reference" hidden="yes"/>
    <value-type name="XMLRef" code="XMLR" description="an opaque reference to an XML node. Initial XMLRefs must be created with XMLOpen."/>
    <class name="dictionary" code="DICT" hidden="yes" plural="dictionaries"/>
    <class name="alias" code="alis" hidden="yes" plural="aliases"/>
    <class name="file specification" code="fss " hidden="yes"/>
    <record-type name="namespace" code="nsls" description="the AppleScript format of an XML namespace.">
      <property name="nsprefix" code="PREf" type="string" description="the prefix of the namespace."/>
      <property name="nsurl" code="PUri" type="string" description="the uri of the namespace."/>
    </record-type>
    <record-type name="NodeInfo" code="NoIn" description="type returned by XMLNodeInfo.">
      <property name="kind" code="kind" type="string" description="XML class of the element : ELEMENT_NODE, TEXT_NODE, ATTRIBUTE_NODE, DOCUMENT_NODE..."/>
      <property name="name" code="pnam" type="string" description="tag of the element for element node."/>
      <property name="attribute" code="attr" description="a list of attribute name, attribute value.">
        <type type="string" list="yes"/>
      </property>
      <property name="namespace" code="nsls" type="namespace" description="optional. namespace of the element."/>
      <property name="hasDTD" code="hdtd" type="boolean" description="for document node only."/>
      <property name="SystemID" code="SyID" type="string" description="the system ID of the DTD (document node only)."/>
      <property name="ExternalID" code="ExID" type="string" description="the external ID of the DTD (document node only)."/>
      <property name="standalone" code="stnd" type="boolean" description="(document node only)."/>
      <property name="paragraph" code="cpar" type="integer" description="the line index of the node in the file"/>
    </record-type>
    <command name="XMLOpen" code="XML open" description="open an XML file and parse it. Must be balanced with a XMLClose at the end of the job. Alternatively, use to &quot;from string&quot; parameter to provide the xml data as a string">
      <direct-parameter type="alias" optional="yes" description="a file containing xml data or an url"/>
      <parameter name="from string" code="from" type="text" optional="yes" description="a string containing xml data"/>
      <parameter name="keep blanks" code="kbln" type="boolean" optional="yes" description="default false"/>
      <parameter name="load external DTD" code="LoEx" type="boolean" optional="yes" description="default: according to the standalone declaration (http://www.w3.org/TR/2008/REC-xml-20081126/#sec-rmd)"/>
      <parameter name="substitute entities" code="SuEn" type="boolean" optional="yes" description="default false"/>
      <parameter name="validate" code="Vali" type="boolean" optional="yes" description="validate with respect to its dtd; default false. Support XML Catalogs (http://www.oasis-open.org/committees/entity/spec-2001-08-06.html) at &quot;/etc/xml/catalog&quot; or &quot;/Library/DTDs/catalog&quot;"/>
      <parameter name="html4" code="HTML" type="boolean" optional="yes" description="require the HTML4 lax parsing. Default: false"/>
      <parameter name="xmlscript" code="xscp" type="boolean" optional="yes" description="parse the script tags even if HTML4 is true. Produce faithful xml when scripts are escaped with CDATA sections. Default: false"/>
      <parameter name="noCDATA" code="noCD" type="boolean" optional="yes" description="if true, encountered CDATA sections are translated into text node. Default: false"/>
      <parameter name="verbose" code="Verb" type="boolean" optional="yes" description="default false"/>
      <parameter name="failure level" code="ErLe" type="integer" optional="yes" description="a number between 1 and 3. 3: fail only on fatal errors, 2: fail on xml recoverable errors, 1: fail on warnings. The default is provided by the XMLErrorLevel command."/>
      <parameter name="in pool" code="pool" type="string" optional="yes" description="the name of the group where the new document is created. Default: the current pool. At launch the current pool is &quot;&quot;."/>
      <parameter name="POST" code="post" type="boolean" optional="yes" description="Default false.  The method of the http request. Relevant for http URLs with query. XMLOpen automatically adds the Content-Type header field and build the request body"/>
      <parameter name="query" code="qury" type="string" optional="yes" description="the query is usually available thru the direct parameter after a question mark.  In some cases (with http POST method), this is not possible and the query may be supplied thru this parameter in conjunction with the POST parameter"/>
<parameter name="header" code="head" type="string" optional="yes" description="the http extra headers of the request: a record or a propertylist containing a dict. Relevant for http URLs"/>
	<parameter name="bypassing namespace" code="bpns" type="boolean" optional="yes" description="default false. Bypass the default namespaces."/>
      <parameter name="encoding" code="enco" type="string" optional="yes" description="relevant only for invalid documents"/>
      <result type="XMLRef" description="a reference to the XML parsed document, required by all the other XML commands"/>
      <documentation>
        <html>
          <div style="display:none" class="example">
            <div class="example-description">
For the examples in this page we shall use the periodic chart of the chemical elements at "http://www.satimage.fr/software/samples/allelements.xml".<br/>
You can open the file in a new Unicode window with the Open URL... menu item (Open...+shift) and enter the URL.<br/>
Or execute:  open "http://www.satimage.fr/software/samples/allelements.xml".<br/>
The following lines load "allelements.xml" into XMLLib.<br/>
Don't forget to balance XMLOpen with a XMLClose to release the opened XML document.
</div>
            <div class="example-source">set the_URL to "http://www.satimage.fr/software/samples/allelements.xml"
set the_doc to XMLOpen the_URL
--  «data XMLR0000000100000000»
set the_root to XMLRoot the_doc 
  --  «data XMLR0000000104739D80»
</div>
            <div class="example-description">XMLOpen lets you create a new xml document from a string
</div>
            <div class="example-source">set doc2 to XMLOpen from string "&lt;?xml version='1.0' encoding='UTF-8'?&gt;&lt;a/&gt;"
--  «data XMLR0000000200000000»
XMLDisplayxml doc2
 --  "&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;
&lt;a/&gt;"
XMLClose doc2
</div>
          </div>
        </html>
      </documentation>
    </command>
    <command name="XMLClose" code="XML clos" description="release memory, associated XMLRefs are no longer valid.">
      <direct-parameter type="XMLRef"/>
    </command>
    <command name="XMLRoot" code="XML root" description="get the root of the XML document.">
      <direct-parameter type="XMLRef" description="the document"/>
      <result type="XMLRef" description="the root element"/>
    </command>
    <command name="XMLCount" code="XML cunt" description="count children in the given XML object.">
      <direct-parameter type="XMLRef" description="an XML object"/>
      <parameter name="all nodes" code="ANot" type="boolean" optional="yes" description="if false XMLCount omits non-element nodes. Default true."/>
      <result type="integer" description="the number of children"/>
      <documentation>
        <html>
          <div style="display:none" class="example">
            <div class="example-description">Please make sure you have run the XMLOpen example first.</div>
            <div class="example-source">XMLCount the_root 
  --  112 
  --  the table contains 112 atoms
</div>
          </div>
        </html>
      </documentation>
    </command>
   <command name="XMLCountElement" code="XML ecun" description="count elements in the given XML object. Equivalent to XMLCount without all nodes">
      <direct-parameter type="XMLRef" description="an XML object"/>
<result type="integer" description="the number of children"/>
    </command>
    <command name="XMLChild" code="XML chld" description="provide access to children of a given XML object.">
      <direct-parameter type="XMLRef" description="the parent"/>
      <parameter name="index" code="indx" type="integer" description="1..XMLCount, index of the requested child"/>
      <parameter name="all nodes" code="ANot" type="boolean" optional="yes" description="if false XMLChild omits non-element nodes. Default true."/>
      <result type="XMLRef" description="the child"/>
      <documentation>
        <html>
          <div style="display:none" class="example">
            <div class="example-description">Please make sure you have run the XMLOpen example first.</div>
            <div class="example-source">set the_child to XMLChild the_root index 1 
  --  «data XMLR0000000104739DC0» 
  --  the_child is an opaque reference 
  --  the atom itself has children: 
set the_child_2 to XMLChild the_child index 1 
  --  to know what kind of thing it is you can use XMLNodeInfo or XMLDisplayXML
XMLDisplayXML the_child_2 
</div>
          </div>
        </html>
      </documentation>
    </command>
     <command name="XMLElement" code="XML echl" description="equivalent to XMLChild without all nodes.">
      <direct-parameter type="XMLRef" description="the parent"/>
      <parameter name="index" code="indx" type="integer" description="1..XMLCountElement, index of the requested child"/>
     <result type="XMLRef" description="the child"/>
     </command>
  <command name="XMLParent" code="XML pare" description="return the parent of an object.">
      <direct-parameter description="">
	<type type="XMLRef"/>
	<type type="XMLRef" list="yes"/>
</direct-parameter>
      <result description="the parent(s)">
 	<type type="XMLRef"/>
	<type type="XMLRef" list="yes"/>
</result>
   </command>
    <command name="XMLNextSibling" code="XML sibl" description="return the next sibling of an object.">
      <direct-parameter>
  	<type type="XMLRef"/>
	<type type="XMLRef" list="yes"/>
</direct-parameter>
    <parameter name="all nodes" code="ANot" type="boolean" optional="yes" description="if false XMLNextSibling omits non-element nodes. Default true."/>
      <result description="the next sibling">
  	<type type="XMLRef"/>
	<type type="XMLRef" list="yes"/>
</result>
  </command>
    <command name="XMLNextElement" code="XML esib" description="equivalent to XMLNextSibling without all nodes.">
      <direct-parameter>
  	<type type="XMLRef"/>
	<type type="XMLRef" list="yes"/>
</direct-parameter>
    <result description="the next sibling element">
   	<type type="XMLRef"/>
	<type type="XMLRef" list="yes"/>
</result>
 </command>
    <command name="XMLPrevSibling" code="XML psib" description="return the previous sibling of an object.">
      <direct-parameter >
    	<type type="XMLRef"/>
	<type type="XMLRef" list="yes"/>
</direct-parameter>
    <parameter name="all nodes" code="ANot" type="boolean" optional="yes" description="if false XMLPrevSibling omits non-element nodes. Default true."/>
      <result description="the previous sibling">
    	<type type="XMLRef"/>
	<type type="XMLRef" list="yes"/>
</result>
  </command>
    <command name="XMLPrevElement" code="XML pesi" description="equivalent to XMLPrevSibling without all nodes.">
      <direct-parameter>
     	<type type="XMLRef"/>
	<type type="XMLRef" list="yes"/>
</direct-parameter>
   <result description="the previous sibling element">
     	<type type="XMLRef"/>
	<type type="XMLRef" list="yes"/>
</result>
   </command>
    <command name="XMLTagName" code="XML gtag" description="return the name of the element.">
      <direct-parameter description="">
 	<type type="XMLRef"/>
	<type type="XMLRef" list="yes"/>
</direct-parameter>
     <result>
  	<type type="string"/>
	<type type="string" list="yes"/>
</result>    <documentation>
        <html>
          <div style="display:none" class="example">
            <div class="example-source">set doc2 to XMLOpen from string "&lt;glass&gt;&lt;water/&gt;&lt;/glass&gt;"
XMLTagName (XMLRoot doc2)
-- "glass"
XMLClose doc2
</div>
          </div>
        </html>
      </documentation>
    </command>
    <command name="XMLGetAttribute" code="XML geta" description="return the contents of an attribute.">
      <direct-parameter description="">
 	<type type="XMLRef"/>
	<type type="XMLRef" list="yes"/>
</direct-parameter>
     <parameter name="name" code="pnam" type="string" description="the name of the attribute"/>
      <parameter name="namespace" code="nsls" type="string" optional="yes" description="the namespace URL.  For instance, to retrieve an xml:lang attribute this parameter must be &quot;http://www.w3.org/XML/1998/namespace&quot; and the name parameter must be &quot;lang&quot;"/>
      <result>
 	<type type="string"/>
	<type type="string" list="yes"/>
</result>
    </command>
    <command name="XMLSetAttribute" code="XML seta" description="set (or create) an attribute.">
      <direct-parameter description="">
	<type type="XMLRef"/>
	<type type="XMLRef" list="yes"/>
</direct-parameter>
      <parameter name="name" code="pnam" description="the name of the attribute">
 	<type type="string"/>
	<type type="string" list="yes"/>
</parameter>
     <parameter name="to" code="to  " description="the contents of the attribute.">
	<type type="string"/>
	<type type="string" list="yes"/>
</parameter>
      <parameter name="namespace" code="nsls" type="string" optional="yes" description="the namespace URL"/>
      <parameter name="suppressing" code="Supp" type="boolean" optional="yes" description="default: false. If true and the &quot;to&quot; parameter is a list containing missing values, then XMLSetAttribute removes the corresponding attributes. Otherwise these values are ignored"/>
      <documentation>
        <html>
          <div style="display:none" class="example">
            <div class="example-source">set doc2 to XMLOpen from string "&lt;a&gt;Satimage&lt;/a&gt;"
set r to (XMLRoot doc2)
XMLSetAttribute r name "href" to "http://www.satimage.fr/software"
XMLDisplayXML r
-- "&lt;a href=\"http://www.satimage.fr/software\"&gt;Satimage&lt;/a&gt;"
XMLClose doc2
</div>
          </div>
        </html>
      </documentation>
    </command>
    <command name="XMLRemoveAttribute" code="XML rema" description="remove an attribute.">
      <direct-parameter description="">
	<type type="XMLRef"/>
	<type type="XMLRef" list="yes"/>
</direct-parameter>
      <parameter name="name" code="pnam" description="the name of the attribute">
 	<type type="string"/>
	<type type="string" list="yes"/>
</parameter>
      <parameter name="namespace" code="nsls" type="string" optional="yes" description="the namespace URL"/>
    </command>
    <command name="XMLRemove" code="XML remo" description="delete an object. The reference to this object (or to any contained object) is no more valid.">
      <direct-parameter description="the object to delete">
   	<type type="XMLRef"/>
	<type type="XMLRef" list="yes"/>
</direct-parameter>
 </command>
    <command name="XMLRemoveChildren" code="XML remc" description="delete all children.">
      <direct-parameter>
   	<type type="XMLRef"/>
	<type type="XMLRef" list="yes"/>
</direct-parameter>
    </command>
    <command name="XMLExists" code="XML Exis" description="Test if an XMLRef is valid.">
      <direct-parameter description="the object(s) to test">
     	<type type="XMLRef"/>
	<type type="XMLRef" list="yes"/>
</direct-parameter>
    <result>
    	<type type="boolean"/>
	<type type="boolean" list="yes"/>
	</result>
    </command>
    <command name="XMLNewChild" code="XML addc" description="create a new child in a given object.">
      <direct-parameter description="the XML string describing the new child or the XMLRef(s) to clone">
 	<type type="string"/>
	<type type="XMLRef"/>
	<type type="XMLRef" list="yes"/>
</direct-parameter>
	<parameter name="keep blanks" code="kbln" type="boolean" optional="yes" description="default false"/>
      <parameter name="at" code="at  " type="XMLRef" description="the parent"/>
      <parameter name="nsclean" code="NsCl" type="boolean" optional="yes" hidden="yes" description="remove the redundant namespaces. Default: true."/>
      <result description="a reference to the newly created object(s)">
	<type type="XMLRef"/>
	<type type="XMLRef" list="yes"/>
	</result>
      <documentation>
        <html>
          <div style="display:none" class="example">
            <div class="example-source">set doc2 to XMLOpen from string "&lt;agents/&gt;"
set r to (XMLRoot doc2)
set a to XMLNewChild "&lt;agent/&gt;" at r
XMLNewChild "&lt;name&gt;James Bond&lt;/name&gt;" at a
XMLNewChild "&lt;number&gt;007&lt;/number&gt;" at a
XMLDisplayXML r
-- "&lt;agents&gt;
  &lt;agent&gt;
    &lt;name&gt;James Bond&lt;/name&gt;
    &lt;number&gt;007&lt;/number&gt;
  &lt;/agent&gt;
&lt;/agents&gt;"
XMLClose doc2
</div>
          </div>
        </html>
      </documentation>
    </command>
    <command name="XMLNewSibling" code="XML adds" description="create a new object beside a given object.">
      <direct-parameter description="the XML string describing the new object or the XMLRef(s) to clone">
 	<type type="string"/>
	<type type="XMLRef"/>
	<type type="XMLRef" list="yes"/>
</direct-parameter>
	<parameter name="keep blanks" code="kbln" type="boolean" optional="yes" description="default false"/>
      <parameter name="after" code="afte" type="XMLRef" optional="yes" description="insert new object after this one"/>
      <parameter name="before" code="befo" type="XMLRef" optional="yes" description="insert new object before this one"/>
      <result description="a reference to the newly created object(s)">
	<type type="XMLRef"/>
	<type type="XMLRef" list="yes"/>
	</result>
      <documentation>
        <html>
          <div style="display:none" class="example">
            <div class="example-source">set doc2 to XMLOpen from string "&lt;lang&gt;&lt;english/&gt;&lt;german/&gt;&lt;spanish/&gt;&lt;/lang&gt;"
set r to (XMLRoot doc2)
set {g} to XMLXPath r with "/lang/*[compare(name(),'french')&gt;0]"
XMLNewSibling "&lt;french/&gt;" before g
XMLDisplayXML r
-- "&lt;lang&gt;
  &lt;english/&gt;
  &lt;french/&gt;
  &lt;german/&gt;
  &lt;spanish/&gt;
&lt;/lang&gt;"
XMLClose doc2
</div>
          </div>
        </html>
      </documentation>
    </command>
    <command name="XMLNodeInfo" code="XML disp" description="return node information.">
      <synonym name="XMLDisplay"/>
      <direct-parameter description="the XML object to display. If the direct parameter is an alias (or a string), XMLNodeInfo attempts to retrieve the root node or the DOCTYPE node
of the file (XMLNodeInfo does not check the whole file)">
		<type type="XMLRef"/>
		<type type="alias"/>
		<type type="string"/>
	</direct-parameter>
      <result type="NodeInfo" description="a record containing the name, the kind and the dictionary (attributes) of the object"/>
      <documentation>
        <html>
          <div style="display:none" class="example">
            <div class="example-description">
Also helpful for development and debugging with its companions XMLDisplayXML and  XMLGetText.
<br/>Please make sure you have run the XMLOpen example first.
</div>
            <div class="example-source">set the_child to XMLChild the_root index 1 
XMLNodeInfo the_child 
  --  {kind:"ELEMENT_NODE", name:"ATOM"} 
  --  the atom itself has children: 
set the_child_2 to XMLChild the_child index 1 
XMLNodeInfo the_child_2 
  --  {kind:"ELEMENT_NODE", name:"NAME"} 
  --  the 1st atom's 1st child is the atom's name 

 --  And now an example with attributes
set {hydrogen} to XMLXPath the_root with "ATOM[SYMBOL='H']/BOILING_POINT"
XMLNodeInfo hydrogen
 --  {kind:"ELEMENT_NODE", name:"BOILING_POINT", attribute:{"UNITS", "Kelvin"}}
XMLDisplayXML hydrogen
 --  "&lt;BOILING_POINT UNITS="Kelvin"&gt;20.28&lt;/BOILING_POINT&gt;"
XMLGetText hydrogen
 --  "20.28"
set {units} to XMLXPath the_root with "ATOM[SYMBOL='H']/BOILING_POINT/@UNITS" -- an atribute node
XMLNodeInfo units
 --  {kind:"ATTRIBUTE_NODE", name:"UNITS"}
XMLDisplayXML units
 -- " UNITS=\"Kelvin\""
XMLGetText units
 --  "Kelvin"
</div>

          </div>
        </html>
      </documentation>
    </command>
    <command name="XMLDisplayXML" code="XML disx" description="return an XML object as a string.">
      <direct-parameter description="the XML object to display">
	<type type="XMLRef"/>
	<type type="XMLRef" list="yes"/>
</direct-parameter>
      <parameter name="formatting" code="smar" type="boolean" optional="yes" description="add returns and tabs for legibility. Default: true."/>
      <parameter name="xml declaration" code="XmlH" type="boolean" optional="yes" description="require the xml declaration (relevant only if the direct parameter is a document). Default: true"/>
      <parameter name="nsclean" code="NsCl" type="boolean" optional="yes" hidden="yes" description="append the implicit namespaces. Default: true."/>
       <parameter name="html4" code="HTML" type="boolean" optional="yes" description="require compatible HTML4 output (relevant only if the direct parameter is a document). Default: false"/>
       <parameter name="encoding" code="enco" type="string" optional="yes" description="change the xml declaration or the html charset. However, the result of XMLDisplayXML is always an AppleScript string (Unicode text)"/>
    <result>
 	<type type="string"/>
	<type type="string" list="yes"/>
</result>
    </command>
    <command name="XMLSetXML" code="XML stxm" description="set the contents of an element or text node.">
      <direct-parameter type="XMLRef" description="an XML object."/>
      <parameter name="to" code="to  " type="string" description="the text description for the new contents of the node (or for the new nodes if the direct parameter is a text node)."/>
      <documentation>
        <html>
          <div style="display:none" class="example">
            <div class="example-source">set doc2 to XMLOpen from string "&lt;div/&gt;"
set r to XMLRoot doc2
XMLSetText r to "Hello&lt;br/&gt;World" -- create one text node
XMLDisplayXML r
 --  "&lt;div&gt;Hello&amp;lt;br/&amp;gt;World&lt;/div&gt;"
XMLSetXML r to "Hello&lt;br/&gt;World" -- create 2 text nodes and a "br" empty node
XMLDisplayXML r
-- "&lt;div&gt;Hello&lt;br/&gt;World&lt;/div&gt;"
XMLClose doc2
</div>
          </div>
        </html>
      </documentation>
    </command>
    <command name="XMLGetText" code="XML gttx" description="return the textual contents of a node.">
      <direct-parameter description="an XML object containing a simple text node.">
 		<type type="XMLRef"/>
 		<type type="XMLRef" list="yes"/>
	</direct-parameter>
     <result>
 		<type type="string"/>
 		<type type="string" list="yes"/>
	</result>
     <documentation>
        <html>
          <div style="display:none" class="example">
            <div class="example-description">
Please make sure you have run the XMLOpen example first.<br/>
Let us first select a node with a single text node:
</div>
            <div class="example-source">set {h} to (XMLXPath the_root with "ATOM[SYMBOL='H']/NAME")
XMLGetText h 
  --  "Hydrogen"
</div>
            <div class="example-description">
But with a more complex element, the result is the concatenation of all the text nodes:
</div>
            <div class="example-source">set {h} to (XMLXPath the_root with "ATOM[SYMBOL='H']")
XMLGetText h 
  --  "Hydrogen1.007941120.2813.81H
      0.0899
    1s1 0.322.12.08
      0.4581
    
      14.1
    
      0.0585
    13.598
      14.304
    
      0.1815
    "
</div>
          </div>
        </html>
      </documentation>
    </command>
    <command name="XMLSetText" code="XML sttx" description="set the textual contents of an element or text node.">
      <direct-parameter description="if it is an element node, its content will be replaced by a unique text node">
		<type type="XMLRef"/>
 		<type type="XMLRef" list="yes"/>
	</direct-parameter>
      <parameter name="to" code="to  " description="copied as is ; in particular the entities are not interpreted.">
 		<type type="string"/>
 		<type type="string" list="yes"/>
	</parameter>
     <parameter name="suppressing" code="Supp" type="boolean" optional="yes" description="default: false. If true and the &quot;to&quot; parameter is a list containing missing values, then XMLSetText removes (attribute or text) or empties (element) the corresponding nodes. Otherwise these values are ignored"/>
     <documentation>
        <html>
          <div style="display:none" class="example">
            <div class="example-description">
Please make sure you have run the XMLOpen example first.<br/>
Let us first select a node with a single text node:
</div>
            <div class="example-source">set {h} to (XMLXPath the_root with "ATOM[SYMBOL='H']/NAME")
XMLSetText h to "Hydrogenium"
XMLGetText h
  --  "Hydrogenium"
</div>
            <div class="example-description">
But with a more complex element, the result is a single the text node; other children are deleted:
</div>
            <div class="example-source">set {h} to (XMLXPath the_root with "ATOM[SYMBOL='H']")
XMLSetText h to "Hydrogenium"
XMLDisplayXML h
 --  "&lt;ATOM STATE="GAS"&gt;Hydrogenium&lt;/ATOM&gt;"
</div>
          </div>
        </html>
      </documentation>
    </command>
    <command name="XMLAppendText" code="XML ApTx" description="append text to an element or text node.">
      <direct-parameter type="string" description="the string to append"/>
      <parameter name="at" code="at  " description="if necessary, a new text node wil be appended at the end of this node">
  		<type type="XMLRef"/>
 		<type type="XMLRef" list="yes"/>
	</parameter>
    <documentation>
        <html>
          <div style="display:none" class="example">
            <div class="example-description">Please make sure you have run the XMLOpen example first.</div>
            <div class="example-source">set doc to XMLOpen from string "&lt;div&gt;Hello&lt;br/&gt;World&lt;/div&gt;"
set root to XMLRoot doc
XMLDisplayXML root
-- "&lt;div&gt;Hello&lt;br/&gt;World&lt;/div&gt;"
XMLAppendText " !" at root -- append the text to the last text node
XMLDisplayXML root
 --  "&lt;div&gt;Hello&lt;br/&gt;World !&lt;/div&gt;"
XMLSetXML root to "Hello&lt;br/&gt;" -- create 1 text node and a "br" empty node
XMLDisplayXML root
 --  "&lt;div&gt;Hello&lt;br/&gt;&lt;/div&gt;"
XMLAppendText " !" at root -- create a new text node
XMLDisplayXML root
 --  "&lt;div&gt;Hello&lt;br/&gt; !&lt;/div&gt;"
</div>
          </div>
        </html>
      </documentation>
    </command>
    <command name="XMLGetNameSpace" code="XML gtn1" description="return the namespace of a given element.">
      <direct-parameter type="XMLRef" description=" an XML element or attribute"/>
      <result description="">
        <type type="namespace"/>
      </result>
    </command>
    <command name="XMLGetNameSpaces" code="XML gtns" description="search all the namespaces in the scope of a given node.">
      <direct-parameter type="XMLRef" description=" an XML node"/>
      <result description="">
        <type type="namespace" list="yes"/>
      </result>
    </command>
    <command name="XMLGetNameSpaceFromPrefix" code="XML gtn2" description="return the URL associated to a given prefix in the scope of a given node.">
      <direct-parameter type="XMLRef" description=" an XML node"/>
       <parameter name="prefix" code="pref" type="text" description=""/>
     <result description="">
        <type type="text"/>
      </result>
    </command>
    <command name="XMLAddNamespace" code="XML adns" description="add a namespace declaration in an XML element.">
      <direct-parameter type="namespace" description=""/>
      <parameter name="at" code="at  " type="XMLRef" description="an XML element"/>
    </command>
    <command name="XMLFind" code="XML find" description="select a child (or children) satisfying a simple criterion: the name of the XML element and/or the key and value of an attribute. XMLFind is a poor man's XMLXPath suitable (and fast) for simple queries and is not aware of the namespace specifiers">
      <direct-parameter type="XMLRef" description="the parent where the search occurs"/>
      <parameter name="name" code="pnam" type="string" optional="yes" description="the name of the element"/>
      <parameter name="key" code="key " type="string" optional="yes" description="the key of the attribute"/>
      <parameter name="value" code="val " type="string" optional="yes" description="the value of the attribute"/>
      <parameter name="all occurrences" code="WaAl" type="boolean" optional="yes" description="returns a list of all occurrences. Default : false"/>
      <result type="XMLRef" description="or a list of XMLRefs with all occurrences"/>
    </command>
    <command name="XMLFindText" code="XML fint" description="find a string in text nodes">
      <direct-parameter type="string" description="the string to find"/>
      <parameter name="in" code="in  " description="the tree node where the search begins">
 	<type type="XMLRef"/>
	<type type="XMLRef" list="yes"/>
</parameter>
     <parameter name="all occurrences" code="WaAl" type="boolean" optional="yes" description="returns a list of all occurrences. Default: false"/>
      <result type="XMLRef" description="the text node found or a list if &quot;all occurrences&quot; is true. Use XMLParent to retrieve the element node."/>
    </command>
    <command name="XMLRegexp" code="XML grep" description="find text nodes conforming (or not conforming) to a given regular expression pattern">
      <direct-parameter type="string" description="the pattern"/>
      <parameter name="in" code="in  " description="the tree node where the search begins">
	<type type="XMLRef"/>
	<type type="XMLRef" list="yes"/>
</parameter>
      <parameter name="all occurrences" code="WaAl" type="boolean" optional="yes" description="returns a list of all occurrences. Default: false"/>
      <parameter name="conforming" code="Wcon" type="boolean" optional="yes" description="if false returns the text nodes not conforming to the pattern. Default: true"/>
      <result type="XMLRef" description="the text node found or a list if &quot;all occurrences&quot; is true. Use XMLParent to retrieve the element node."/>
      <documentation>
        <html>
          <div style="display:none" class="example">
            <div class="example-description">
Please make sure you have run the XMLOpen example first.
</div>
            <div class="example-source">XMLGetText (XMLRegexp "B.*ium" in the_doc with all occurrences)
 --  {"Barium", "Beryllium", "Bohrium", "Berkelium"}
</div>
          </div>
        </html>
      </documentation>
    </command>
    <command name="XMLBase" code="XML base" description="get the base URL of a node.">
      <direct-parameter type="XMLRef" description="a node"/>
      <parameter name="as" code="rtyp" optional="yes" type="type" description="string, alias..."/>
      <result type="string" description="the effective base of the node, not the xml:base attribute."/>
    </command>
    <command name="XMLSetBase" code="XML Sbas" description="set the xml:base attribute of a node.">
      <direct-parameter type="XMLRef" description="a node"/>
      <parameter name="to" code="to  " type="string" description="or alias. Passing &quot;&quot; remove the xml:base attribute of the node"/>
    </command>
    <command name="XMLAbsoluteURL" code="XML aURL" description="resolve a relative URL using a node base (or an absolute URL).">
      <direct-parameter type="string" description="a (possibly) relative URL"/>
      <parameter name="from" code="from" type="XMLRef" description="the node providing the base URL (or an absolute URL)"/>
      <parameter name="as" code="rtyp" optional="yes" type="type" description="string, alias..."/>
      <result type="string" description="an absolute URL"/>
    </command>
    <command name="XMLRelativeURL" code="XML rURL" description="translate an URL into the most suitable relative URL with respect to a given base.">
      <direct-parameter description="an absolute URL">
	<type type="string"/>
	<type type="alias"/>
	</direct-parameter>
      <parameter name="from" code="from" type="XMLRef" description="the node providing the base URL (or an absolute URL)"/>
      <result type="string" description="a relative or absolute URL"/>
    </command>
    <command name="XMLError" code="XML lErr" description="the full text of the last error occurred (debugging)">
      <result type="string" description=""/>
    </command>
  </suite>
  
  <suite name="XML XPath, XSLT" code="XML " description="An AppleScript implementation of XPath, and XSLT.">
    <record-type name="XPathRef" code="XMLP" description="A record defining a list of XMLRef by providing a node and an xpath string. Such a record may be used instead of a list of XMLRef.">
      <property name="XMLRef" code="XMLR" type="XMLRef" description="the starting node"/>
      <property name="xpath pattern" code="xpat" type="string" description="an xpath expression defining a node set."/>
      <property name="namespace" code="nsls" description="(optional) definition of the prefixes used in the xpath expression.">
		<type type="namespace" list="yes"/>
      </property>
      <property name="xpath variables" code="vars" description="(optional) an even list {varname1,value1,…}. varname1 is a string and value1 should be a string, a number, a boolean or a (list of ) CFRef . The XPath expression may refer to such a variable by $varname1. Alternatively, xpath variables may be a record {var1:value1,...}">
	<type type="any" list="yes"/>
	<type type="record"/>
      </property>
   </record-type>
    <command name="XMLXPath" code="XML path" description="select an object (or objects) satisfying an xpath request. ">
      <direct-parameter type="XMLRef" description="the starting point for the path"/>
      <parameter name="with" code="with" type="string" description="the xpath expression"/>
      <parameter name="namespace" code="nsls" optional="yes" description="{nsprefix:theName, nsurl:thehref} or a list of records. Or use XMLSetContext.">
   	<type type="namespace"/>
	<type type="namespace" list="yes"/>
</parameter>
    <parameter name="xpath variables" code="vars" type="list" optional="yes" description="an even list {varname1,value1,…}. The XPath expression may refer to such a variable by $varname1. Alternatively, xpath variables may be a record {var1:value1,...}"/>
    <result description="the selected objects">
        <type type="XMLRef" list="yes"/>
      </result>
      <documentation>
        <html>
XMLXpath conforms to XPath1.0 and adds :
<ul>
<li>the XPath2.0 functions compare, upper-case, lower-case, ends-with and base-uri in the namespace "http://www.w3.org/2005/xpath-functions"
</li><li>
the folowing <a href="http://www.exslt.org/" onclick="window.open('http://www.exslt.org/');return false;">exslt extensions</a>:
<ul><li>align, concat, decode-uri, encode-uri, padding and replace in the namespace "http://exslt.org/strings"</li>
<li>abs, acos, asin, atan, constant, cos, exp, highest, log, lowest, max, min, power, random, sin, sqrt and tan in the namespace "http://exslt.org/math"</li>
<li>add, add-duration, date, date-time, day-abbreviation, day-in-month, day-in-week, day-in-year, day-name, day-of-week-in-month, difference, duration, hour-in-day, leap-year, minute-in-hour, month-abbreviation, month-in-year, month-name, second-in-minute, seconds, sum, time, week-in-month, week-in-year and  year in the namespace "http://exslt.org/dates-and-times"</li>
<li>difference, distinct, has-same-node, intersection, leading and trailing in the namespace "http://exslt.org/sets"</li>
<li>md5, sha1, sha224, and sha256 in the namespace "http://exslt.org/crypto".
</li></ul>
</li>
<li>parent-uri and relative-uri in the namespace "http://satimage.fr/software/xpath-functions". The function parent-uri(uri) returns the "parent" of uri and the function relative-uri(uri1,uri2) returns uri1 as a relative url with respect to uri2 (uri, uri1, uri2 must be of type string or nodeset).
</li>

<li>any AppleScript handler thru the namespace "http://satimage.fr/software/xpath-functions-applescript" (see the example below).
</li>
</ul>
          <div style="display:none" class="example">
            <div class="example-description">
Please make sure you have run the XMLOpen example first.<br/>
Here we suppose we would like to retrieve the atomic weight of Oxygen.
</div>
            <div class="example-source">set {the_weight} to XMLXpath the_root with "ATOM[NAME='Oxygen']/ATOMIC_WEIGHT" 
XMLGetText the_weight 
  --  "15.9994"
</div>
            <div class="example-description">
Or shorter
</div>
            <div class="example-source">XMLXpath the_root with "string(ATOM[NAME='Oxygen']/ATOMIC_WEIGHT)" 
  --  "15.9994"
</div>
            <div class="example-description">
Or using xpath variables (very useful to avoid problems with characters like "'&lt;&gt;&amp;)
</div>
            <div class="example-source">XMLXPath the_root with "string(ATOM[NAME=$s]/ATOMIC_WEIGHT)" xpath variables {s:"Oxygen"} 
  --  "15.9994"
</div>
            <div class="example-description">
Another example with a test on an attribute:
</div>
            <div class="example-source">XMLGetText (XMLXPath the_root with "*[@STATE='GAS']/NAME")
 --  {"Argon", "Hydrogen", "Helium", "Xenon"}
</div>
             <div class="example-description">
Another example with a math function:
</div>
            <div class="example-source">XMLSetContext the_doc namespace {nsprefix:"math", nsurl:"http://exslt.org/math"}
XMLGetText (XMLXPath the_doc with "//ATOM[math:abs(number(ATOMIC_NUMBER[1])-8)&lt;3]/NAME")
 -- {"Carbon", "Fluorine", "Nitrogen", "Neon", "Oxygen"}
</div>
            <div class="example-description">
Suppose you discover an unknown atom, and you name it Smilium.The most urgent thing would be to find a symbol for it.
</div>
            <div class="example-source">XMLXpath the_root with "ATOM[SYMBOL='Sm']"
 --  {«data XMLR000000010718F430»}
</div>
            <div class="example-description">
The symbol "Sm" is already in use, let us try "Sl":
</div>
            <div class="example-source">XMLXpath the_root with "ATOM[SYMBOL='Sl']"
 --  {}
</div>
            <div class="example-description">
The symbol "Sl" is available. We now find the element just before Smilium in alphabetic order:
</div>
            <div class="example-source">set x to item -1 of (XMLXPath the_root with "ATOM[compare(NAME,'Smilium')&lt;0]")
XMLGetText (XMLFind x name "NAME")
 -- "Samarium"
</div>
            <div class="example-description">
And create the Smilium:
</div>
            <div class="example-source">set the_data to "&lt;ATOM&gt; 
&lt;NAME&gt;Smilium&lt;/NAME&gt; 
&lt;SYMBOL&gt;Sl&lt;/SYMBOL&gt;&lt;/ATOM&gt;" 
set the_smilium to XMLNewSibling the_data after x
 --  «data XMLR00000001095D9720»
</div>
            <div class="example-description">
Now we can enter more information about Smilium:
</div>
            <div class="example-source">XMLNewChild "&lt;ATOMIC_NUMBER&gt;144&lt;/ATOMIC_NUMBER&gt;" at the_smilium 
XMLNewChild "&lt;ATOMIC_WEIGHT&gt;321&lt;/ATOMIC_WEIGHT&gt;" at the_smilium 
XMLNewChild "&lt;ATOMIC_RADIUS&gt;3.14&lt;/ATOMIC_RADIUS&gt;" at the_smilium
</div>
            <div class="example-description">
... and finally display our element:
</div>
            <div class="example-source">XMLDisplayXML the_smilium
 -- "&lt;ATOM&gt;
  &lt;NAME&gt;Smilium&lt;/NAME&gt;
  &lt;SYMBOL&gt;Sl&lt;/SYMBOL&gt;
  &lt;ATOMIC_NUMBER&gt;144&lt;/ATOMIC_NUMBER&gt;
  &lt;ATOMIC_WEIGHT&gt;321&lt;/ATOMIC_WEIGHT&gt;
  &lt;ATOMIC_RADIUS&gt;3.14&lt;/ATOMIC_RADIUS&gt;
&lt;/ATOM&gt;"
</div>
            <div class="example-description">
Assuming that the following handler exists in your AppleScript context:
</div>
<div class="example-source">on myregexp(pattern, s)
	try
		find text pattern in s with regexp and string result
		return true
	end
	return false
end myregexp
</div>
            <div class="example-description">
You can now use regexp expressions in the following way:
</div>
<div class="example-source">XMLSetContext the_doc namespace {nsprefix:"AS", nsurl:"http://satimage.fr/software/xpath-functions-applescript"}
set x to XMLXPath the_root with "ATOM/NAME[AS:myregexp('Se.*um', string(.))]"
XMLDisplayXML x
-- {"&lt;NAME&gt;Selenium&lt;/NAME&gt;", "&lt;NAME&gt;Seaborgium&lt;/NAME&gt;"}</div>
          </div>
        </html>
      </documentation>
    </command>
    <command name="XMLSetContext" code="XML xpns" description="set the default context for future xpath requests.">
      <direct-parameter type="XMLRef" description=" an XML document"/>
      <parameter name="namespace" code="nsls" optional="yes" description="a list of {nsprefix:theName, nsurl:thehref}. If nsurl is &quot;&quot; the pair is removed. Further calls to XMLXPath may omit the &quot;namespace&quot; parameter">
        <type type="namespace" list="yes"/>
      </parameter>
      <parameter name="xpath variables" code="vars" optional="yes" description="a list {varname1 ,value1,…}. Further XMLXPath expressions may refer to such a variable by $varname1. If value1 is &quot;missing value&quot; the variable &quot;varname1&quot; becomes undefined.  Alternatively, &quot;xpath variables&quot; may be a record {var1:value1,...}">
	<type type="string" list="yes"/>
	<type type="record"/>
	</parameter>
     <documentation>
        <html>
          <div style="display:none" class="example">
            <div class="example-description">
Here we deal with "allelementsns.xml", a clone of "allelements.xml" with a default namespace in the root element.
Suppose we would like to retrieve the atomic weight of Oxygen.
</div>
            <div class="example-source">set the_URLns to "http://www.satimage.fr/software/samples/allelementsns.xml"
set the_docns to XMLOpen the_URLns
--  «data XMLR0000000200000000»
set the_rootns to XMLRoot the_docns 
set {the_atom} to XMLXpath the_rootns with "ATOM[NAME='Oxygen']" 
  --  {}
</div>
            <div class="example-description">Indeed the ATOM element belongs to the namespace "http://www.satimage.fr/software/samples/periodictable"
</div>
            <div class="example-source">XMLXpath the_rootns with "pt:ATOM[pt:NAME='Oxygen']" namespace {nsprefix:"pt", nsurl:"http://www.satimage.fr/software/samples/periodictable"}
  --  {«data XMLR0000001208209A80»}
</div>
            <div class="example-description">XMLSetContext may simplify the scripting
</div>
            <div class="example-source">XMLSetContext the_docns  namespace {nsprefix:"pt", nsurl:"http://www.satimage.fr/software/samples/periodictable"}
XMLXpath the_rootns with "pt:ATOM[pt:NAME='Oxygen']"
  --  {«data XMLR0000001208209A80»}
</div>
          </div>
        </html>
      </documentation>
    </command>
    <command name="XMLGetContext" code="XML xpNS" description="get the xpath context.">
      <direct-parameter type="XMLRef" description=" an XML document"/>
<result type="record"/>
</command>
   <command name="XMLGetNodePath" code="XML NoPa" description="return a valid xpath for an object.">
      <direct-parameter type="XMLRef" description="the node"/>
      <parameter name="from" code="from" type="XMLRef" optional="yes" description="starting point for the path"/>
      <result type="string" description="the path"/>
      <documentation>
        <html>
          <div style="display:none" class="example">
            <div class="example-description">Please make sure you have run the XMLOpen example first.<br/>
For debugging purposes, the returned XPath expression is exactly the path to the object</div>
            <div class="example-source">set {the_weight} to XMLXpath the_root with "ATOM[NAME='Oxygen']/ATOMIC_WEIGHT" 
XMLGetNodePath the_weight
 --  "/PERIODIC_TABLE/ATOM[67]/ATOMIC_WEIGHT"
</div>
          </div>
        </html>
      </documentation>
    </command>
    <command name="XMLXPointer" code="XML xptr" description="resolve a reference to a XML fragment. &quot;XMLXPointer&quot;  can open the targeted XML file only if the &quot;read permission&quot; parameter is not false.">
      <direct-parameter type="string" description="the link: &quot;[absoluteOrRelativeUrl]#anID&quot; (the file must have been opened with &quot;XMLOpen&quot; using the validate option) or &quot;[absoluteOrRelativeUrl]#xpointer(xpathExpression)&quot;"/>
      <parameter name="baseURL" code="burl" optional="yes" type="string" description="the base URL in order to resolve a relative URL. Alternatively may be provided by the &quot;from&quot; parameter "/>
      <parameter name="from" code="from" optional="yes" type="XMLRef" description="for non-local links and relative URLs, define the base URL for the link. For local links (starting with #) and relative xpathExpression: the element where the search begins"/>
      <parameter name="in pool" code="pool" type="string" optional="yes" description="the name of the group where the open document can be found. By default XMLXPointer use the pool of the &quot;from&quot; parameter or the current pool"/>
      <parameter name="namespace" code="nsls" optional="yes" description="{nsprefix:theName, nsurl:thehref} or a list of records to resolve the xpath expression">
    	<type type="namespace"/>
	<type type="namespace" list="yes"/>
</parameter>
     <parameter name="read permission" code="CnOp" type="boolean" optional="yes" description="default true. Open a new document if necessary. If true (or missing) the following parameters may be useful."/>
      <parameter name="keep blanks" code="kbln" type="boolean" optional="yes" description="default false"/>
      <parameter name="substitute entities" code="SuEn" type="boolean" optional="yes" description="default false"/>
      <parameter name="validate" code="Vali" type="boolean" optional="yes" description="validate with respect to its dtd; default false"/>
      <parameter name="failure level" code="ErLe" type="integer" optional="yes" description="a number between 1 and 3. 3: fail only on fatal errors, 2: fail on xml recoverable errors, 1: fail on warnings. The default is provided by the XMLErrorLevel command."/>
      <result description="the objects linked">
        <type type="XMLRef" list="yes"/>
      </result>
      <documentation>
        <html>
          <div style="display:none" class="example">
            <div class="example-description">Please make sure you have run the XMLOpen example first.<br/>
An example with a local pointer</div>
            <div class="example-source">set the_pointer to "#xpointer(/PERIODIC_TABLE/ATOM[NAME='Oxygen'])"
set {the_atom} to XMLXPointer the_pointer from the_doc
  --  {«data XMLR0000001208209A80»}
</div>
            <div class="example-description">An example with an absolute URL</div>
            <div class="example-source">set the_pointer to "http://www.satimage.fr/software/samples/allelements.xml#xpointer(/PERIODIC_TABLE/ATOM[NAME='Oxygen'])"
set {the_atom} to XMLXPointer the_pointer
  --  {«data XMLR0000001208209A80»}
</div>
            <div class="example-description">An example with a relative URL and explicit namespace.<br/>
This kind of reference frequently occurs when you refer to an xml element of another document (usually in a href attribute).<br/>
This example uses the pool parameter to allocate the (possible) new document in a new pool which can be deleted after use.</div>
            <div class="example-source">set the_URLns to "allelementsns.xml"
set the_pointer to "xpointer(/pt:PERIODIC_TABLE/pt:ATOM[pt:NAME='Oxygen']/pt:ATOMIC_WEIGHT)"
set ns to "http://www.satimage.fr/software/samples/periodictable"
set fullURL to (escapeURL the_URLns) &amp; "#" &amp; the_pointer
set {the_weight} to XMLXPointer fullURL from the_atom namespace {nsprefix:"pt", nsurl:ns} in pool "trash"
-- or better
set fullURL to (escapeURL the_URLns) &amp; "#xmlns(pt=" &amp; ns &amp; ")" &amp; the_pointer
set {the_weight} to XMLXPointer fullURL from the_atom in pool "trash"
XMLGetText the_weight
  --  "15.9994"
DeletePool "trash"
</div>
          </div>
        </html>
      </documentation>
    </command>
   <command name="XMLEscapeXPointer" code="XML ExXp" description="return a valid string value for an xpath predicate." hidden="yes">
	<direct-parameter type="string" description="the string"/>
     <result type="string" description="the escaped string"/>
     </command>
  <command name="XMLGetXPointer" code="XML gxpt" description="return a valid xpointer for an object." hidden="yes">
      <direct-parameter type="XMLRef" description="the node"/>
 	<!--parameter name="matching" code="matc" type="string" description="an xpath expression evaluated to build the last predicate of the pointer"/-->
 	<parameter name="suffix" code="suff" type="string" description="an xpath expression to append as the last path(s) of the xpointer"/>
     <result type="string" description="the xpointer"/>
    </command>
    <command name="XMLTransform" code="XML xslt" description="transform an XML document (or a node) according to a given XSLT stylesheet.">
      <direct-parameter type="XMLRef" description="the XML document to transform (or a node)"/>
      <parameter name="with" code="with" type="string" optional="yes" description="(or an XMLRef) the stylesheet. If this parameter is missing, XMLTransform will attempt to find in the direct parameter a processing instruction providing a stylesheet: &lt;?xml-stylesheet type='…' href='... '?&gt;. The type attribute must be 'text/xsl' or 'application/xml' or 'text/xml'"/>
      <parameter name="xsl params" code="varx" optional="yes" description="a list {varname1 ,value1,…}. Set the values of the global xsl:param elements of the stylesheet or create new xsl global variables. The values are strings interpreted as xpath expressions. Thus a raw string parameter must be quoted like in {s:&quot;'hello'&quot;}. As there is no escaping in xsl, raw string parameters can more simply be provided with the &quot;xsl string params&quot; parameter. Alternatively, &quot;xsl params&quot; may be a record {var1 ,value1,…}">
	<type type="record"/>
	<type type="string" list="yes"/>
	</parameter>
      <parameter name="xsl string params" code="vaxs" type="list" optional="yes" description="like xsl params, but the string values are automatically quoted"/>
      <parameter name="in" code="kfil" type="file specification" optional="yes" description="a file path for the result"/>
      <parameter name="as" code="rtyp" type="type" optional="yes" description="XMLRef or string or CFRef. Default: XMLRef"/>
      <parameter name="in pool" code="pool" type="string" optional="yes" description="the name of the group where the new document must be created. Default: the current pool. At launch the current pool is &quot;&quot;."/>
      <result description=" or no result if the &quot;in&quot; parameter is present. A reference to the newly created document (resp. string) if the &quot;as&quot; parameter is XMLRef (resp. string) or a property list if the &quot;as&quot; parameter is CFRef (and the resulting data are actually valid XML data for a property list)">
	<type type="XMLRef"/>
	<type type="string"/>
	<type type="CFRef"/>
	</result>
      <documentation>
        <html>
XMLTransform conforms to XSLT-1.0. Most of the <a href="http://www.exslt.org/" onclick="window.open('http://www.exslt.org/');return false;">exslt extensions</a> are available. Namely the whole common, math, sets and strings modules, the functions 
evaluate() and map() of the dynamic module, the date module except parse-date() and format-date(), the functions module except the element script.<br/>
The <a href="http://www.saxonica.com/documentation/extensions/functions.html" onclick="window.open('http://www.saxonica.com/documentation/extensions/functions.xml');return false;">saxon extensions</a>  expression(), eval(), evaluate() and line-number() are also available in the namespace "http://icl.com/saxon".
          <div style="display:none" class="example">
            <div class="example-description">In Smile, if you have opened a document containing a processing instruction providing a stylesheet: &lt;?xml-stylesheet type='application/xml' href='... '?&gt;, you can display in a web window the result of its transformation by hitting the enter key with the command key pressed in its Unicode window.</div>
            <div class="example-description">Extract the 20 first ATOM , sort the first elements of ATOM for better display, add an ID attribute to ATOM elements and a css stylesheet</div>
            <div class="example-source">set the_doc to XMLOpen "http://www.satimage.fr/software/samples/allelements.xml"
set f to ((path to desktop from user domain) as string) &amp; "firstelements.xml"
XMLTransform the_doc with "http://www.satimage.fr/software/samples/extract.xsl" in file f
open file f
</div>
            <div class="example-description">In Smile, you can now display these elements by hitting the enter key with the option (alt) key pressed in the "firstelements.xml" window.<br/>
The stylesheet can be opened with the Open URL menu or by executing: open "http://www.satimage.fr/software/samples/extract.xsl".<br/>
Notice that "firstelements.xml" now declares a dtd. In Smile, you can check the validity of the document by hitting the enter key with the command key pressed in the "firstelements.xml" window.<br/>
Now ATOM nodes can be retrieved with their symbol like in:
</div>
            <div class="example-source">set theurl to "file://localhost" &amp; POSIX path of file f
set {hydrogen} to XMLXPointer (theurl &amp; "#H") with validate
</div>
            <div class="example-description">or by rank with the atomic number:
</div>
            <div class="example-source">
set {hydrogen} to XMLXPointer (theurl &amp; "#xpointer(PERIODIC_TABLE/ATOM[1])")
 -- or with the abbreviated syntax:
set {hydrogen} to XMLXPointer (theurl &amp; "#/1/2") -- element 1 of PERIODIC_TABLE is HEADER !
</div>
          </div>
        </html>
      </documentation>
    </command>
    <command name="XMLCompile" code="XML pxsl" hidden="yes" description="compile an XML document into a XSLT stylesheet for faster transformations. The resulting stylesheet is stored within the document and will be used in future XMLTransform calls">
      <direct-parameter type="XMLRef" description="the XML document"/>
    </command>
    <command name="XMLNewIndex" code="XML NKey" hidden="no" description="create an index for XMLLookup. XMLNewIndex returns an error if its evaluation results in an empty index">
      <direct-parameter type="string" description="the name of the index"/>
      <parameter name="match" code="matc" type="string" description="an XPath expression for the selected items"/>
      <parameter name="use" code="use " type="string" description="an XPath expression for the identifier of the items in the index"/>
      <parameter name="at" code="at  " type="XMLRef" description="the document or the node to apply the match"/>
      <parameter name="namespace" code="nsls" optional="yes" description="{nsprefix:theName, nsurl:thehref} or a list of records. Or use XMLSetContext.">
    	<type type="namespace"/>
	<type type="namespace" list="yes"/>
</parameter>
     <parameter name="xpath variables" code="vars" type="list" optional="yes" description="a list {varname1 ,value1,…}. The XPath expression may refer to such a variable by $varname1.  Alternatively, &quot;xpath variables&quot; may be a record {var1 :value1,…}"/>
   <documentation>
        <html>
The goal is to optimize XPath requests by evaluating once and for all an xpath request and putting the results in an index.<br/>
The references of the index are the nodes matched by the &quot;match&quot; pattern.
The entries are the string value of the &quot;use&quot; pattern apllied to each reference of the index.
An index works as an &quot;xsl:key&quot; element in an xslt stylesheet.<br/><br/>
	Be aware that if after calling XMLNewIndex you add nodes to the document, the index may be no longer correct. <br/>
	In this case rebuild the index with XMLNewIndex or delete it by passing XMLNewIndex an empty match: &quot;&quot;.
        </html>
      </documentation>
    </command>
    <command name="XMLLookup" code="XML GKey" hidden="no" description="retrieve a list of nodes associated to an index and a key">
      <direct-parameter type="string" description="the entry to find in the index"/>
      <parameter name="using" code="by  " type="string" description="the name of the index. XMLLookup returns an error if there is no index with the given name"/>
       <parameter name="at" code="at  " type="XMLRef" description="the document (or a node of the document) holding the index"/>
     <result description="an empty list if there is no entry in the index corresponding to the direct parameter">
        <type type="XMLRef" list="yes"/>
      </result>
    <documentation>
        <html>
 	<div style="display:none" class="example">
           <div class="example-description">A basic example:
</div>
            <div class="example-source">set doc to XMLOpen from string "&lt;a&gt;&lt;b name='x'/&gt;&lt;b name='y'/&gt;&lt;/a&gt;"
XMLNewIndex "test key" match "//b" use "@name" at doc
set {x} to XMLLookup "x" using "test key" at doc
XMLDisplayXML x
 -- "&lt;b name=\"x\"/&gt;"
</div>
           <div class="example-description">The following example opens a plist as an XML document. Then build an index to map the &quot;keys&quot; of the plist dictionary onto their contents.
</div>
            <div class="example-source">set doc to XMLOpen "/Applications/Safari.app/Contents/Info.plist"
XMLNewIndex "dict" match "/plist/dict/*[name()!='key']" use "preceding-sibling::key[1]" at doc
set {x} to XMLLookup "CFBundleIdentifier" using "dict" at doc
XMLGetText x
 -- "com.apple.Safari"
</div>
</div>
        </html>
      </documentation>
	</command>
     <command name="XMLEntries" code="XML LKey" description="return the list of the keys in an index created with XMLNewIndex">
      <direct-parameter type="string" description="the name of the index"/>
      <parameter name="at" code="at  " type="XMLRef" description="the document containing the index"/>
      <parameter name="duplicate match" code="dupl" type="boolean" optional="yes" description="if true (resp. false) retrieves only the entries corresponding to multiple matches (resp. single match). Default: return all entries"/>
      <result>
        <type type="string" list="yes"/>
      </result>
   </command>
  <command name="XMLIndexDocument" code="XML idoc" hidden="yes" description="index or re-index a document. May be useful to speed up XMLTransform or XMLXPath when some expressions involve node ordering.">
      <direct-parameter type="XMLRef" description="the XML document to index"/>
    </command>
    <command name="XMLStrings" code="XML DCon" hidden="yes" description="">
      <direct-parameter type="XMLRef" description="or a list">
	<type type="XMLRef"/>
	<type type="XMLRef" list="yes"/>
	</direct-parameter>
	<result type="text" description=""/>
    </command>
    <command name="XMLLocalize" code="XML LoCo" hidden="yes" description="">
      <direct-parameter type="XMLRef" description="or a list"/>
	<parameter name="using" code="in  " type="alias" description="the .strings file"/>
     <documentation>
        <html>
 	<div style="display:none" class="example">
           <div class="example-description">A basic example:
</div>
            <div class="example-source">set doc to …
set l to XMLXPath doc with "//text()"
set ll to XMLStrings l
writetext ( build localizable {ll, ll}) to "afile.strings"
XMLLocalize l using "afile.strings"
</div>
</div>
        </html>
      </documentation>
   </command>
  </suite>
  
  <suite name="XML Documents" code="XML " description="Commands to handle XML documents and global settings.">
    <command name="XMLURL" code="XML gurl" description="get the path to the XML document.">
      <direct-parameter type="XMLRef" description="the document"/>
      <parameter name="as" code="rtyp" optional="yes" type="type" description="string, alias..."/>
      <parameter name="parent" code="pare" optional="yes" type="boolean" description="return the parent folder. Default: false"/>
      <result type="file specification" description=""/>
    </command>
    <command name="XMLSetURL" code="XML sURL" description="">
      <direct-parameter type="XMLRef" description="a node"/>
      <parameter name="to" code="to  " type="alias" description=""/>
    </command>
    <command name="XMLDocument" code="XML gfur" description="get the opened XML document from the file URL.">
      <direct-parameter type="file specification" description=""/>
      <parameter name="in pool" code="pool" type="string" optional="yes" description="Default: the current pool. At launch the current pool is &quot;&quot;."/>
      <result type="XMLRef" description="the document"/>
    </command>
    <command name="XMLCatalog" code="XML cata" description="resolve a PUBLIC or SYSTEM ID or a URI with respect to the available catalogs">
      <direct-parameter type="string" description=""/>
      <result type="string" description="a URL"/>
        <documentation><html>
	Available <a href="http://www.oasis-open.org/committees/entity/spec-2001-08-06.html" onclick="window.open('http://www.oasis-open.org/committees/entity/spec-2001-08-06.html');return false;">catalogs</a> are located at &quot;/etc/xml/catalog&quot; or &quot;/Library/DTDs/catalog&quot;.
       </html>
      </documentation>
    </command>
   <command name="XMLCloneDocument" code="XML cdoc" description="create a clone of the direct parameter (except for the url)">
      <direct-parameter type="XMLRef" description="a document"/>
      <parameter name="in pool" code="pool" type="string" optional="yes" description="Default: the current pool."/>
      <result type="XMLRef" description="the newly created document"/>
    </command>
    <command name="XMLXInclude" code="XML Xinc" description="XInclude processing">
      <direct-parameter type="XMLRef" description="a document"/>
      <result type="integer" description="the number of includes processed"/>
      <documentation>
        <html>
          <div style="display:none" class="example">
            <div class="example-source">set doc to XMLOpen from string "&lt;a&gt;
  &lt;include xmlns='http://www.w3.org/2001/XInclude' 
    href='http://www.satimage.fr/software/samples/allelements.xml' 
    xpointer=\"xpointer(/PERIODIC_TABLE/ATOM[NAME='Argon'])\"/&gt;
&lt;/a&gt;"
XMLXInclude doc
XMLDisplayXML doc
  --  "&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;
&lt;a&gt;
  &lt;ATOM STATE=\"GAS\" xml:base=\"http://www.satimage.fr/software/samples/allelements.xml\"&gt;
    &lt;NAME&gt;Argon&lt;/NAME&gt;
    &lt;ATOMIC_WEIGHT&gt;39.948&lt;/ATOMIC_WEIGHT&gt;
    &lt;ATOMIC_NUMBER&gt;18&lt;/ATOMIC_NUMBER&gt;
    ...
     &lt;THERMAL_CONDUCTIVITY UNITS=\"Watts/meter/degree Kelvin\"&gt;&lt;!-- At 300K --&gt;
      0.0177
    &lt;/THERMAL_CONDUCTIVITY&gt;
  &lt;/ATOM&gt;
&lt;/a&gt;"
</div>
          </div>
        </html>
      </documentation>
    </command>
    <command name="XMLGetEncoding" code="XML genc" description="return the encoding of the XML document.">
      <direct-parameter type="XMLRef" description="the document"/>
      <result type="string" description=""/>
    </command>
    <command name="XMLSetEncoding" code="XML senc" description="set the encoding of the XML document. The encoding will be used by XMLSave.">
      <direct-parameter type="XMLRef" description="the document"/>
      <parameter name="to" code="to  " type="string" description="&quot;UTF-8&quot;, &quot;ASCII&quot;, &quot;UTF-16&quot;, &quot;ISO-8859-1&quot;... &quot;ISO-8859-9&quot;, &quot;ISO-2022-JP&quot;, &quot;SHIFT_JIS&quot; or &quot;EUC-JP&quot;."/>
      <documentation>
        <html>
          <div style="display:none" class="example">
            <div class="example-description">An example with a local pointer</div>
            <div class="example-source">set doc2 to XMLOpen from string "&lt;a&gt;Français&lt;/a&gt;"
XMLGetEncoding doc2
 -- ""
XMLClose doc2</div>
            <div class="example-description">Default is ASCII, and the file will be saved as &lt;?xml version="1.0"?&gt;
&lt;a&gt;Fran&amp;#xE7;ais&lt;/a&gt;.</div>
            <div class="example-source">XMLSetEncoding doc to "UTF-8"
<div class="example-description">Now the file will be saved as &lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;a&gt;Français&lt;/a&gt;.</div>
</div>
            <div class="example-description">You may also proceed as in</div>
            <div class="example-source">set doc2 to XMLOpen from string "&lt;?xml version='1.0' encoding='UTF-8'?&gt;&lt;a&gt;Français&lt;/a&gt;"
XMLGetEncoding doc2
 -- "UTF-8"
XMLClose doc2</div>
          </div>
        </html>
      </documentation>
    </command>
    <command name="XMLSetIndentString" code="XML Indt" description="set the default indent string. The indent string is used by XMLSave and XMLDisplayXML.">
      <direct-parameter type="string" description="a string containing spaces or tabs"/>
      <result type="string" description="the previous indent string"/>
    </command>
    <command name="XMLSave" code="XML save" description="save an XML document.">
      <direct-parameter type="XMLRef" description="the XML object to save"/>
      <parameter name="in" code="kfil" optional="yes" type="file specification" description="the file path"/>
      <parameter name="formatting" code="smar" type="boolean" optional="yes" description="add returns and tabs for legibility. Default: true."/>
      <parameter name="html4" code="HTML" type="boolean" optional="yes" description="require compatible HTML4 output. Default: false"/>
      <parameter name="xml declaration" code="XmlH" type="boolean" optional="yes" description="require the xml declaration. Default: true"/>
      <parameter name="encoding" code="enco" type="string" optional="yes" description=""/>
      <documentation>
        <html>
          <div style="display:none" class="example">
            <div class="example-description">Please make sure you have run the XMLOpen example first.</div>
            <div class="example-source">XMLSave doc in file ("" &amp; (path to desktop) &amp; "allelements.xml")
</div>
          </div>
        </html>
      </documentation>
    </command>
    <command name="XMLErrorLevel" code="XML ErLe" description="">
      <direct-parameter type="integer" optional="yes" description="the requested error level. 1 fails on warnings. 2 fails on XML recoverable errors. 3 fails on fatal errors. Set to 2 at the beginning"/>
      <result type="integer" description="the previous setting"/>
    </command>
    <command name="XMLExtendedChar" code="XML Vr11" description="toggle between the 1.0 and the 1.1 XML recommendation for character definition.">
      <direct-parameter type="boolean" optional="yes" description="if true the extended character set (including all positive characters smaller than 32) of the 1.1 XML recommendation is in use."/>
      <result type="boolean" description="the previous setting"/>
    </command>
    <command name="XMLListDocuments" code="XML List" description="">
      <direct-parameter type="string" optional="yes" description="the pool. Default: the current pool."/>
      <parameter name="as" code="as  " type="anything" optional="yes" description="XMLListDocuments as string returns the url of the xmldocuments instead of their references"/>
      <result description="the opened xmldocuments">
        <type type="XMLRef" list="yes"/>
      </result>
    </command>
   <command name="XMLSetDocID" code="XML SDbK" description="set an identifier to an existing document. Avoid many problems with the AppleScript's global variables">
      <direct-parameter type="XMLRef" description="the XML document"/>
	<parameter name="to" code="to  " type="string" description=""/>
	<result type="string" description="the previous ID"/>
    </command>
   <command name="XMLGetDocByID" code="XML GDbK" description="retrieve a document by identifier">
      <direct-parameter type="string" description="the identifier"/>
     <parameter name="in pool" code="pool" type="string" optional="yes" description="Default: the current pool."/>
	<result type="XMLRef" description=""/>
    </command>
    <command name="XMLc14n" code="XML c14n" description="Canonicalization of an XML document">
      <direct-parameter type="XMLRef" description="the XML document or a list of XMLRef or an XPathRef"/>
      <parameter name="in" code="in  " type="alias" optional="yes" description="the destination file"/>
      <parameter name="comments" code="comm" type="boolean" optional="yes" description="include comments. Default true"/>
      <parameter name="nodelist" code="Nset" optional="yes" hidden="yes" description="the set of nodes to output. Default all nodes.">
        <type type="XMLRef" list="yes"/>
      </parameter>
      <parameter name="exclusive" code="Excl" type="boolean" optional="yes" description="exclusive canonicalization. Default false"/>
      <parameter name="inclusive prefixes" code="Incl" optional="yes" description="list of inclusive prefixes (relevant if exclusive is true).">
        <type type="string" list="yes"/>
      </parameter>
      <parameter name="digest" code="Meth" type="string" optional="yes" description="&quot;SHA1&quot; or &quot;MD5&quot;. If this parameter is provided, returns a digest using the specified algorithm. The result is base64-encoded if the &quot;in&quot; parameter is not provided."/>
      <result type="string" description="if the &quot;in&quot; parameter is not provided."/>
      <documentation>
        <html>
	If the direct parameter is an XMLRef, XMLc14n processes the entire document containing that reference.<br/>
	If the direct parameter is a list, XMLc14n processes the subset according to <a href="http://www.w3.org/TR/xml-c14n11/#DocSubsets" onclick="window.open('http://www.w3.org/TR/xml-c14n11/#DocSubsets');return false;">xml-c14n11</a>.<br/>
	Consequently, in order to process the element myElem as a whole, you may use the XPathRef: {XMLRef:myElem, xpath pattern:"descendant-or-self::node()|.//@*"} as direct parameter.
       </html>
      </documentation>
   </command>
   <command name="XMLSetExtras" code="XML Sext" description="associate any AppleScript contents with a document. This utility command is at the scripter's convenience and has no effect on the XML part of the document">
      <direct-parameter type="XMLRef" description="the XML document"/>
	<parameter name="to" code="to  " type="anything" description=""/>
    </command>
   <command name="XMLGetExtras" code="XML Gext" description="retrieve the extras of a document">
      <direct-parameter type="XMLRef" description="the XML document"/>
	<result type="anything" description=""/>
    </command>
  </suite>
  
  <suite name="XML Validation" code="XML " description="Validation of documents and DTDs">
    <command name="XMLValidate" code="XML vali" description="validate a document with respect to its DTD or a given dtd.">
      <direct-parameter type="XMLRef" description="the document or the element to validate"/>
      <parameter name="against" code="agai" type="alias" optional="yes" description="a dtd"/>
      <parameter name="verbose" code="Verb" type="boolean" optional="yes" description="default false"/>
      <parameter name="failure level" code="ErLe" type="integer" optional="yes" description="a number between 1 and 2. 2: fail on recoverable xml errors, 1: fail on warnings. Default: 2"/>
      <documentation>
        <html>
          <div style="display:none" class="example">
            <div class="example-description">In Smile, you can check the syntax of a document by hitting the enter key in its Unicode window, and you can check the validity of a document by hitting the enter key with the command key pressed in its Unicode window.</div>
          </div>
        </html>
      </documentation>
    </command>
    <command name="XMLSchema" code="XML Schm" description="validate a schema or a document with respect to a schema">
      <direct-parameter type="XMLRef" optional="yes" description="the document. If this parameter is missing, XMLSchema attempts to validate the schema provided in the &quot;with respect to&quot; parameter"/>
      <parameter name="with respect to" code="With" type="alias" optional="yes" description="the url of the schema. May be also provided as text or XMLRef. If this parameter is missing, XMLSchema uses the attributes &quot;noNamespaceSchemaLocation&quot; or &quot;SchemaLocation&quot; in the namespace &quot;http://www.w3.org/2001/XMLSchema-instance&quot;"/>
    </command>
    <command name="XMLRelaxNG" code="XML rlax" description="validate a relaxNG schema or a document with respect to a relaxNG schema">
      <direct-parameter type="XMLRef" optional="yes" description="the document. If this parameter is missing, XMLRelaxNG attempts to validate the relaxNG schema provided in the &quot;with respect to&quot; parameter"/>
      <parameter name="with respect to" code="With" type="alias" description="the url of the relaxNG schema. May be also provided as text or XMLRef."/>
    </command>
    <command name="XMLCheckDTD" code="XML Pdtd" description="check the syntax of a given DTD.">
      <direct-parameter type="anything" description="the DTD's URL or alias, or the text of the DTD"/>
    </command>
	<command name="XMLGetByID" code="XML geti" description="retrieve an element by ID. i.e. this element has an attribute xml:id or an attribute declared as an ID is the DTD of the document. In this later case, the document must have been opened with validate. XMLGetByID x xmlid &quot;aa&quot; is a shortcut for XMLPath x with &quot;id('aa')&quot;.">
		<direct-parameter type="XMLRef" description="a valid XMLRef"/>
   		<parameter name="xmlid" code="xlmi"	description="id of the element(s)">
		<type type="XMLRef"/>
		<type type="XMLRef" list="yes"/>
		</parameter>
		<result description="according to the xmlid parameter">
		<type type="XMLRef"/>
		<type type="XMLRef" list="yes"/>
		</result>
	</command>
	<command name="XMLGetxmlID" code="XML geID" description="return a string corresponding to an xml:id attribute or to the ID attribute according to the dtd; otherwise XMLGetxmlID returns an error ">
		<direct-parameter type="XMLRef" description="a valid XMLRef (corresponding to an element)"/>
		<result type="string" description="the ID"/>
	</command>
    <command name="XMLValidName" code="XML Isnm" description="check the validity of an XML Name (http://www.w3.org/TR/REC-xml/#NT-Name)">
      <direct-parameter description="the name(s)">
         <type type="string"/>
        <type type="string" list="yes"/>
</direct-parameter>
     <result description="">
        <type type="boolean"/>
    </result>
    </command>
    <command name="XMLValidNCName" code="XML Isnc" description="check the validity of an XML NCName (http://www.w3.org/TR/2009/REC-xml-names-20091208/#NT-NCName)">
      <direct-parameter description="the name(s)">
         <type type="string"/>
        <type type="string" list="yes"/>
</direct-parameter>
     <result description="">
        <type type="boolean"/>
    </result>
    </command>
    <command name="XMLDu" code="XML du  " hidden="yes" description="sum up the structure of a node">
      <direct-parameter type="XMLRef" description=""/>
      <result type="string" description="a textual representation of the tree"/>
    </command>
    <command name="XMLGetID" code="XML gID " hidden="yes" description="">
      <direct-parameter type="CFRef" description="a reference to an element of the XML document"/>
      <result type="integer" description="the ID of the XML document"/>
    </command>
    <command name="XMLFromID" code="XML gfID" hidden="yes" description="">
      <direct-parameter type="integer" description="the ID of the XML document"/>
      <result type="CFRef" description="a reference to an element of the XML document"/>
    </command>
  </suite>
  
  <suite name="Satimage PropertyList Additions" code="PLST" description="An AppleScript interface to property lists.">
      <documentation>
        <html>
<h3>Presentation</h3><p>
Property lists are widely used in MacOSX. They are stored as files with the "plist" extension.
</p><p>
Property lists (plists in short) can contain simple types (numbers, strings, dates, booleans and raw data) and collections: dictionaries and arrays:
</p><ul style="line-height: 1em ; margin-top: 0.5em ; margin-bottom: 0.5em"><li>
dictionaries contain elements that you reference by key (string).
</li><li>
arrays contain ordered elements that you reference by index.
</li></ul><p>
	This suite lets you edit property lists.
	</p><h3>Creating a plist</h3>
	The CRef type is used to refer to any element in a plist or to the plist itself.<br/>
		Plists are created with PlistNew:<br/>
	<div class="example-source">	set myPlist to PlistNew {"a", "b", "c"}</div>
	or with PlistOpen:
	<div class="example-source">	set myPlist to PlistNew someFile.</div>
	<h3>Browsing a plist</h3>Walking through a plist is quite simple with the <span class="src">PlistChild</span> command:<ul><li>
	use the parameter key to access a dictionary's child,
</li><li>
	use the parameter index to access an array's item.</li></ul>
	Retrieve the contents of an element with PlistGet.
	<h3>Changing a plist</h3><p>Modifying a plist may be more difficult since some elements are not changeable and thus can only be replaced inside their container.
	The modifiable elements are dictionary, arrays and strings.</p>
	Thus, while
	<div class="example-source">	PlistGet someReference</div>
	always works, 
	<div class="example-source">	PlistSet someReference to something</div> may fail.<br/>
	And you must use <div class="example-source">	PlistSet someDict key aKey to something</div> or <div class="example-source">	PlistSet someArray index i to something</div>
	except in some rare cases where either you need to keep some references intact (see warnings) or you set the root itself.<br/> 
	Examples:
<div class="example-source">	set p to PlistNew {"a", "b", 1}
	set pp to PlistChild p index 2
	PlistGet pp -- returns "b"
	PlistSet pp to "d" -- ok
	PlistGet pp -- returns "d"
	PlistSet pp to {} -- error: pp is not an array
	PlistSet p index 2 to {} -- ok, but pp is no more valid
	set pp to PlistChild p index 3
	PlistGet pp -- returns 1
	PlistGet p index 3-- returns 1
	PlistSet pp to 2 -- error: pp is not mutable
	PlistSet p index 3 to 2 -- ok, but pp is no more valid
	PlistGet p -- returns {"a", {}, 2}
</div>
	<h3>Saving and closing a plist</h3>
	When you are done with a plist you can save it with PlistSave and close it with PlistClose to release the memory.
	<h3>Warnings</h3>
	This suite handles real pointers for the sake of speed. Thus you cannot reuse references to an object that has been replaced or removed:
	<div class="example-source">	set pp to PlistChild p key "name"
	PlistSet p key "name" to "a"
	-- or PlistRemoveChild p key "name"
	PlistGet pp --crashes the current application</div>
	while:
	<div class="example-source">	set pp to PlistChild p key "name"
	PlistSet pp to "a" -- here we assume that pp already refers to a string
	PlistGet pp --returns "a"</div>
	But referring to an element of a plist closed with PlistClose does not crash - it will just throw an error.
	<div class="example-source">	set pp to PlistChild p key "name"
	PlistClose p
	try
		PlistGet pp --error can't get «data...»
	on error
		log "Damnation, the plist does not exist!"
	end</div>
        </html>
      </documentation>
    <value-type name="CFRef" code="CFob" description="an opaque reference to a property list element. Initial CFRefs must be created with PlistNew or PlistOpen.">
</value-type>
    <command name="PlistNew" code="PLSTmake" description="create a new PropertyList with the contents of the direct parameter. Must be balanced with a PlistClose at the end of the job.">
      <direct-parameter type="anything" optional="yes" description="any AppleScript type, usually, a record or a list. Default: an empty record."/>
      <parameter name="typed" code="flat" type="boolean" optional="yes" description="if false, write as raw base64 data. Default: true. Use false when storing complex types (such as alias) to allow other software to use the p-list (for instance, when changing a Preference p-list). If false, specify the type with 'as' when using PlistGet."/>
      <parameter name="in pool" code="pool" type="string" optional="yes" description="the name of the group where the plist document is created. Default: the current pool. At launch the current pool is &quot;&quot;."/>
      <result type="CFRef" description="a reference to the property list, required by the other PropertyList commands"/>
    </command>
    <command name="PlistOpen" code="PLSTopen" description="open a property list file and parse it. Must be balanced with a PlistClose at the end of the job.">
      <direct-parameter type="alias" description=""/>
      <parameter name="from string" code="from" type="text" optional="yes" description="a string containing xml data"/>
      <parameter name="in pool" code="pool" type="string" optional="yes" description="the name of the group where the plist document is created. Default: the current pool. At launch the current pool is &quot;&quot;."/>
      <result type="CFRef" description="a reference to the parsed property list, required by the other PropertyList commands"/>
    </command>
    <command name="PlistClose" code="PLSTclos" description="release memory, associated CFRefs are no more valid.">
      <direct-parameter type="CFRef"/>
    </command>
    <command name="PlistRetain" code="PLSTReta" description="" hidden="yes">
      <direct-parameter type="CFRef"/>
    </command>
    <command name="PlistSave" code="PLSTsave" description="save a Plist.">
      <direct-parameter type="CFRef" description="the Plist to save"/>
      <parameter name="in" code="kfil" type="file specification" optional="yes" description="the file path"/>
      <parameter name="binary" code="bina" type="boolean" optional="yes" description="default: false"/>
    </command>
    <command name="PlistBinaryFormat" code="PLSTIsBi" description="is the plist in a binary file format?">
      <direct-parameter type="CFRef" description="the Plist"/>
      <result type="boolean"/>
    </command>
    <command name="PlistCount" code="PLSTcunt" description="count children in the given CFRef.">
      <direct-parameter  description="an CFRef">
	<type type="CFRef"/>
 	<type type="CFRef" list="yes"/>
</direct-parameter>
      <result description="the number of children">
	<type type="integer"/>
 	<type type="integer" list="yes"/>
 </result>
    </command>
    <command name="PlistChild" code="PLSTchld" description="provide access to children of a given CFRef. Similar to PlistGet, but return a CFRef. Provide either a  &quot;index&quot;, or a &quot;key&quot;, or a &quot;using&quot; parameter. Only the direct parameter or &quot;key&quot;, or &quot;index&quot; may be a list. If there is no specifier, PlistChild returns all the children.">
      <direct-parameter type="CFRef" description="the parent: an array or a dictionary"/>
      <parameter name="index" code="indx" type="integer" optional="yes" description="1..PlistCount, index of the requested child"/>
      <parameter name="key" code="key " type="string" optional="yes" description="relevant only if the direct parameter is a dictionary"/>
      <parameter name="using" code="by  " type="string" optional="yes" description="a selecting path. A valid path contains sequences of keys (for dictionaries) separated with slashes, and indices (for arrays) inside brackets. Example: &quot;key1/key2[4]/key3[2]&quot;"/>
      <result type="CFRef" description="the child or a list if one parameter is a list"/>
    </command>
    <command name="PlistType" code="PLSTdisp" description="return the type of a CFRef (the tag's name).">
      <direct-parameter type="CFRef" description="the CFobject to display"/>
      <result type="string"/>
    </command>
    <command name="PlistGet" code="PLSTdisx" description="Similar to PlistChild, but return actual contents. Can be used with direct parameter alone to retrieve the contents of a CFRef. Only one of the parameters &quot;key&quot;, &quot;index&quot; or &quot;using&quot; can be specified. Only the direct parameter or &quot;key&quot;, or &quot;index&quot; may be a list.">
      <direct-parameter type="CFRef" description="the CFRef to display"/>
      <parameter name="as" code="rtyp" type="string" optional="yes" description="for base64 data stored 'without typed', the AppleScript type."/>
      <parameter name="index" code="indx" type="integer" optional="yes" description="1..PlistCount, index of the requested child"/>
      <parameter name="key" code="key " type="string" optional="yes" description=""/>
      <parameter name="using" code="by  " type="string" optional="yes" description="a path. See the PlistChild command."/>
      <result type="anything" description="or a list if one parameter is a list"/>
    </command>
    <command name="PlistGetXML" code="PLSTDISP" description="return the contents of a CFRef as xml data.">
      <direct-parameter type="CFRef" description="the CFRef to display"/>
      <result type="string"/>
    </command>
    <command name="PlistGetKeys" code="PLSTgkey" description="return the list of keys in a dictionary.">
      <direct-parameter type="CFRef" description="the dictionary"/>
      <result>
        <type type="string" list="yes"/>
      </result>
    </command>
    <command name="PlistSet" code="PLSTseta" description="equivalent to PlistNewChild on dictionaries. Use PlistSet to modify an existing element in an array.">
      <direct-parameter type="CFRef" description="the parent: an array or a dictionary"/>
      <parameter name="index" code="indx" optional="yes" description="1..PlistCount, index of the requested child">
		<type type="integer"/>
		<type type="integer" list="yes"/>
	</parameter>
      <parameter name="key" code="key " optional="yes" description="">
		<type type="string"/>
		<type type="string" list="yes"/>
	</parameter>
      <parameter name="using" code="by  " type="string" optional="yes" description="a path. See the PlistChild command."/>
      <parameter name="to" code="to  " type="anything" description="any AppleScript content or a CFRef. Be aware of self-references when you use CFRef"/>
      <parameter name="suppressing" code="Supp" type="boolean" optional="yes" description="default: true. If true and the &quot;to&quot; parameter is a list containing missing values, then XMLSetAttribute removes the corresponding attributes. Otherwise these values are ignored"/>
      <parameter name="typed" code="flat" type="boolean" optional="yes" description="irrelevant with CFRefs. Default: true. If false, write as raw base64 data. Use false to store complex types (eg alias) for use by other software (eg, when editing a Preference file). If false, specify the type with 'as' when using PlistGet."/>
      <documentation>
        <html>
        </html>
      </documentation>

    </command>
    <command name="PlistNewChild" code="PLSTaddc" description="create a new child in a given object (array or dictionary). You must use PlistSet to modify an existing element of an array.">
      <direct-parameter type="anything" optional="yes" description="any AppleScript content or a CFRef. Be aware of self-references when you use CFRef. Default: an empty record."/>
      <parameter name="at" code="at  " type="CFRef" description="the container: an array or a dictionary"/>
      <parameter name="index" code="indx" type="integer" optional="yes" description="1..(PlistCount+1), index of the new child"/>
      <parameter name="key" code="key " type="string" optional="yes" description="requested if CFRef is a dictionary"/>
      <parameter name="using" code="by  " type="string" optional="yes" description="a path. See the PlistChild command."/>
      <parameter name="typed" code="flat" type="boolean" optional="yes" description="see the PlistSet command."/>
      <result type="CFRef" description="the child"/>
    </command>
    <command name="PlistRemoveChild" code="PLSTremc" description="delete an object. The reference to this object (or to any object it may contain) is no longer valid. Future use of this reference may crash XMLLib.">
      <direct-parameter type="CFRef" description="the container: an array or a dictionary"/>
      <parameter name="index" code="indx" type="integer" optional="yes" description="1..PlistCount, index of the requested child"/>
      <parameter name="key" code="key " optional="yes" description="the key of the requested child">
 	<type type="string"/>
	<type type="string" list="yes"/>
</parameter>
      <parameter name="using" code="by  " type="string" optional="yes" description="a path. See the PlistChild command."/>
    </command>
    <command name="PlistEqual" code="PLSTequa" description="compare the contents of two plist. Return true if equal.">
      <direct-parameter type="CFRef" description=""/>
      <parameter name="to" code="to  " type="CFRef"/>
	<result type="boolean"/>
    </command>
    <command name="PlistExist" code="PLSTcont" description="match a value in an array (or a dictionary).">
      <direct-parameter type="any" description="a value"/>
      <parameter name="in" code="in  " type="CFRef" description="an array (or a dictionary)"/>
      <parameter name="several values" code="List" type="boolean" description="is the direct parameter a list of values. Default: false"/>
	<result description="the available indices (1 based) or the available keys">
	<type type="integer" list="yes"/>
	<type type="string" list="yes"/>
	</result>
    </command>
     <command name="PlistMatch" code="PLSTmatc" description="return a list of dictionaries containing a given key or a given (key, value) pair.">
      <direct-parameter type="CFRef" description="an array containing dictionaries"/>
      <parameter name="key" code="key " type="string" description="the key to match. For a more complex request, omit this parameter and provide the &quot;using&quot; parameter"/>
	<parameter name="using" code="by  " type="string" optional="yes" description="a selecting path (see PlistChild)"/>      
	<parameter name="value" code="to  " optional="yes" description="the requested value of the key">
	<type type="string"/>
	<type type="real"/>
	<type type="boolean"/>
	</parameter>
	<result>
	<type type="CFRef" list="yes"/>
	</result>
    </command>
   <command name="PlistURL" code="PLSTgurl" description="get the path to the plist document.">
      <direct-parameter type="CFRef" description="the document"/>
      <parameter name="as" code="rtyp" optional="yes" type="type" description=""/>
      <parameter name="parent" code="pare" optional="yes" type="boolean" description="return the parent folder. Default: false"/>
      <result type="file specification" description=""/>
    </command>
    <command name="PlistDocument" code="PLSTgfur" description="retrieve the already opened plist from the file URL.">
      <direct-parameter type="file specification" description=""/>
      <parameter name="in pool" code="pool" type="string" optional="yes" description="Default: the current pool. At launch the current pool is &quot;&quot;."/>
      <result type="CFRef" description="the plist"/>
    </command>
    <command name="PlistListDocuments" code="PLSTList" description="List the opened plist documents">
      <direct-parameter type="string" optional="yes" description="the pool. Default: the current pool"/>
      <result description="the property lists opened in the specified pool.">
        <type type="CFRef" list="yes"/>
      </result>
    </command>
    <command name="PlistAdd" code="PLSTconc" description="concatenate arrays or dictionaries. &quot;PlistAdd x after y&quot; (resp. &quot;PlistAdd x before y&quot;) works like the Applescript statement &quot;set y to y &amp; x&quot; (resp. &quot;set y to x &amp; y&quot;) ">
      <direct-parameter type="CFRef" description="of the same type as the &quot;after&quot; or &quot;before&quot; parameter. May alternatively be a list or a record"/>
      <parameter name="after" code="afte" type="CFRef" optional="yes" description="the array or the dictionary to modify"/>
      <parameter name="before" code="befo" type="CFRef" optional="yes" description="the array or the dictionary to modify"/>
    </command>
    <command name="PlistToJSON" code="PLSTJSON" description="transform a plist into a JSON">
      <direct-parameter type="CFRef" description=""/>
      <parameter name="formatting" code="smar" type="boolean" optional="yes" description="add returns and tabs for legibility. Default: false."/>   
     <parameter name="replacer" code="rplc" type="string" optional="yes" description="a JavaScript function for the optional callback of JSON.stringify."/>   
	<result type="string"/>
      <documentation>
        <html>
          <div style="display:none" class="example">
            <div class="example-source">set p to PlistNew
PlistNewChild 3 at p key "any key"
PlistNewChild {"a", "list"} at p key "b"
PlistToJSON p
-- "{\"b\":[\"a\", \"list\"], \"any key\":3}"
PlistClose p
</div>
          </div>
        </html>
      </documentation>
    </command>
     <command name="PlistToJavaScript" code="PLSTToJa" hidden="yes" description="">
      <direct-parameter type="CFRef" description=""/>
      <result type="string"/>
    </command>
  <command name="PlistFromJSON" code="PLSTNOSJ" description="transform a JSON into a plist">
      <direct-parameter type="string" description="the JSON"/>
       <parameter name="in pool" code="pool" type="string" optional="yes" description="the name of the group where the plist document is created. Default: the current pool."/>
     <result type="CFRef"/>
     </command>
   <command name="PlistSetDocID" code="PLSTSDbK" description="set an identifier to an existing plist">
      <direct-parameter type="CFRef" description="the XML document"/>
	<parameter name="to" code="to  " type="string" description=""/>
	<result type="string" description="the previous ID"/>
    </command>
   <command name="PlistGetDocByID" code="PLSTGDbK" description="retrieve a plist by identifier. Avoid many problems with the AppleScript's global variables">
      <direct-parameter type="string" description="the identifier"/>
     <parameter name="in pool" code="pool" type="string" optional="yes" description="Default: the current pool."/>
	<result type="CFRef" description=""/>
    </command>
    <command name="PlistGetID" code="PLSTgID " hidden="yes" description="">
      <direct-parameter type="CFRef" description="a reference to the property list"/>
      <result type="integer" description="the ID of the property list"/>
    </command>
    <command name="PlistFromID" code="PLSTgfID" hidden="yes" description="">
      <direct-parameter type="integer" description="the ID of the property list"/>
      <result type="CFRef" description="a reference to the property list"/>
    </command>
  </suite>
  
  <suite name="Satimage Pool Additions" code="POOL" description="Pool management. Optional features that you can use to manage groups of XML documents or PList's, protect their privacy, and dispose of them when suitable.">
    <command name="SetPool" code="POOLpool" description="Set the new default pool. Further &quot;XMLOpen&quot;, &quot;XMLListDocuments&quot;, &quot;PlistOpen&quot;, &quot;PlistNew&quot; and &quot;PlistListDocuments&quot; will occur in this pool">
      <direct-parameter type="string" description="name of the new default pool"/>
      <result type="string" description="the previous default pool."/>
    </command>
    <command name="DeletePool" code="POOLdpoo" description="release all documents in the specified pool.">
      <direct-parameter type="string" optional="yes" description="name of the pool. Default: the default pool."/>
    </command>
    <command name="GetPool" code="POOLgpoo" description="return the name of the pool containing the document">
      <direct-parameter type="anything" description="an XML document (XMLRef) or a plist document (CFRef)"/>
      <result type="string" description="the name of the pool."/>
    </command>
  </suite>
  <suite name="XNF Additions" code="XNF2" description="">
      <documentation>
        <html>
	<h3>Overview</h3>
<p>
Extensible Numerical File Format, abbreviated XNF, describes a public format for storing numerical data.
</p>
<p>
An XNF file is a bundle, a special kind of folder which looks like a file (and that Finder names a "package"). Double-clicking an XNF file opens a user interface in Smile to browse, view, extract, and plot the data that it contains. For example, run this script in Smile: </p><div class="example-source">	open "http://www.satimage.fr/software/xnf/sample.xnf/"</div>

<p>
The bundle contains two items at the root level: a folder named Contents, which stores the data files, and the index.xml XML file, describing the contents of the files. The metadata in the XML file can be handled using the XML commands above. The XNF Additions Suite provides commands to retrieve or write the binary data.
</p>
<p>
Documentation about the xnf format can be found at <a href="http://www.satimage.fr/software/en/sl_xnfv2.html">http://www.satimage.fr/software/en/sl_xnfv2.html</a>
</p>
        </html>
      </documentation>
	<command name="XNFOpen" code="XNF2open" description="open an xnf bundle or create a new xnf bundle if the file does not exist. Must be balanced with a XMLClose (or DeletePool) at the end of the job. XNFOpen equivalent to XMLOpen but expects a bundle path instead of a file path.">
		<direct-parameter type="file" description="usually with a file name ending with&quot;.xnf&quot;"/>
      		<parameter name="in pool" code="pool" type="string" optional="yes" description="the name of the group where the new document is created. Default: the current pool. At launch the current pool is &quot;&quot;."/>
		<result type="XMLRef" description="a reference to the table of contents. Call XMLClose to release the memory"/>
      <documentation>
        <html>
         <div style="display:none" class="example">
            <div class="example-source">	set doc to XNFOpen "http://www.satimage.fr/software/xnf/sample.xnf/"
	set ds1 to XNFGetDataSet doc xmlid "test1D"
	set x to XNFGetArray ds1 index 1
	set y to XNFGetArray ds1 index 3
	QuickCurve(x, y, 0) -- SmileLab only
	set ds2 to XNFGetDataSet doc xmlid "test2D"
	set z to XNFGetArray ds2 index 1 as record
	QuickScalarMap(0, 0, z, 0) -- SmileLab only
	set ds3 to XNFGetDataSet doc xmlid "test3D"
	set {nx, ny} to XNFGetDimensions ds3
	set z to XNFGetArray ds3 index 1 as record start {1, 1, 4} length {nx, ny, 1}
	QuickScalarMap(0, 0, z, 0) -- SmileLab only
	XMLClose doc
	    </div>
	</div>
        </html>
      </documentation>
	</command>
	<command name="XNFSaveBundle" code="XNF2save" description="save the TOC of the XNF bundle (like XMLSave does) and update the modification date of the bundle">
		<direct-parameter type="XMLRef" description="an XMLRef returned by XNFOpen"/>
      <documentation>
        <html>
         <div style="display:none" class="example">
            <div class="example-source">	set x to creatematrix "x" ncols 10 nrows 11
	set f to POSIX path of (path to desktop) &amp; "sample.xnf"
	set doc to XNFOpen f
	set ds to XNFNewDataSet "test" dimensions {10, 11} at doc
	XNFNewArray x at ds
	XNFSetScaleRange 1 at ds to {-1, 2 / 9}
	XNFSetScaleRange 2 at ds to {-1, 2 / 10}
	XNFSaveBundle doc
	XMLClose doc
	open f -- SmileLab only
	    </div>
	</div>
        </html>
      </documentation>
	</command>
	<command name="XNFNewDataSet" code="XNF2sarr" description="create a new dataset with a given id and given dimensions">
		<direct-parameter type="string" description="id of the new dataset"/>
		<parameter name="dimensions" code="dims"	 description="a list {dim1, ... dimn} of integers">
		<type type="integer" list="yes"/>
		</parameter>
		<parameter name="scale" code="Tsca" optional="yes" description="a list of scale">
			<type type="array of real" list="yes"/>
		</parameter>
		<parameter name="at" code="at  "	type="XMLRef" description="usually the XML document returned by XNFOpen"/>
 		<result type="XMLRef" description="the resulting node"/>
	<documentation>
        <html>
		The direct parameter must be a valid XML id, i.e. a <a href="http://www.w3.org/TR/2006/REC-xml-names-20060816/#A737" onclick="window.open('http://www.w3.org/TR/2006/REC-xml-names-20060816/#A737','win','width=900,scrollbars=yes');return false;">NCName</a>; roughly speaking, it begins with a letter or an underscore and must contain only letters, digits, underscores, periods and hyphens.
        </html>
	</documentation>
	</command>
	<command name="XNFGetDataSet" code="XNF2getI" description="retrieve an reference to a dataset by id. XNFGetDataSet thexnf xmlid &quot;aa&quot; is a shortcut for XMLPath thexnf with &quot;id('aa')&quot;">
		<direct-parameter type="XMLRef" description="an XMLRef returned by XNFOpen"/>
   		<parameter name="xmlid" code="xlmi"	type="string" description="id of the dataset"/>
		<result type="XMLRef" description="a dataset"/>
	</command>
	<command name="XNFGetDimensions" code="XNF2size" description="retrieve the dimensions of a dataset. ">
		<direct-parameter type="XMLRef" description="a dataset"/>
		<result type="any" description="the list of the dimensions {n1,...}"/>
	</command>
	<command name="XNFNewArray" code="XNF2ndat" description="add an array to a dataset">
		<direct-parameter type="array of real" description=""/>
		<parameter name="at" code="at  "	type="XMLRef" description="a dataset returned by XNFNewDataSet or XNFGetDataSet"/>
		<parameter name="as" code="rtyp" type="string" optional="yes" description="the requested format for the data in the file: &quot;real32&quot; | &quot;real64&quot; | &quot;uint8&quot; | &quot;uint16&quot; | &quot;uint32&quot; | &quot;sint8&quot; | &quot;sint16&quot; | &quot;sint32&quot; | &quot;complex64&quot; | &quot;complex32&quot;. Default: &quot;real64&quot;"/>
		<parameter name="big endian" code="Endi" type="boolean" optional="yes" description="the requested byteorder. Default: system byte order."/>
  		<result type="XMLRef" description="the resulting node"/>
	</command>
	<command name="XNFNewFileData" code="XNF2ndaf" description="add an array already stored in a binary file to a dataset">
		<direct-parameter type="any" description="an alias or a string for an absolute or relative URL">
		</direct-parameter>
		<parameter name="at" code="at  "	type="XMLRef" description="a node returned by XNFNewDataSet or XNFGetDataSet"/>
  		<parameter name="starting at" code="strt" type="integer" optional="yes" description="offset of the data in bytes. Default 0"/>
		<parameter name="as" code="rtyp" type="string" description="the format of the data in the file: &quot;real32&quot; | &quot;real64&quot; | &quot;uint8&quot; | &quot;uint16&quot; | &quot;uint32&quot; | &quot;sint8&quot; | &quot;sint16&quot; | &quot;sint32&quot; | &quot;complex64&quot; | &quot;complex32&quot;"/>
		<parameter name="big endian" code="Endi" type="boolean" optional="yes" description="is the file encoded as big endian or little endian? Default: system byte order."/>
		<result type="XMLRef" description="the resulting node"/>
	</command>
	<command name="XNFGetArray" code="XNF2oarr" description="retrieve an array or a sub-array. If &quot;start&quot; and &quot;length&quot; are present XNFGetArray returns a sub-array of possibly lower dimensionality if some length is 1.">
		<direct-parameter type="XMLRef" description="a dataset"/>
 		<parameter name="index" code="indx"	type="integer" optional="yes" description="index of the array inside the dataset. Default 1"/>
       	<parameter name="start" code="star" optional="yes" description="for each dimension of the dataset, the first element to read. 1-based">
 		<type type="integer" list="yes"/>
		</parameter>
       	<parameter name="length" code="leng" optional="yes" description="for each dimension of the dataset, number of elements to read">
 		<type type="integer" list="yes"/>
		</parameter>
		<parameter name="part" code="part" type="string" optional="yes" description="for complex arrays, choose a string in the set &quot;r&quot; (real part),  &quot;i&quot; (imaginary part),  &quot;m&quot; (modulus) or  &quot;p&quot; (phase)"/>
		<parameter name="as" code="rtyp" type="type" optional="yes" description="pass 'record' to get the result as a record {dimensions:{...}, array of real: ...}"/>
		<result type="array of real" description="or record"/>
	</command>
	<command name="XNFSetScale" code="XNF2ssca" description="set the scale of the specified axis to a list of real">
		<direct-parameter type="integer" description="index of the axis in the dataset"/>
		<parameter name="at" code="at  "	type="XMLRef" description="a node returned by XNFNewDataSet or XNFGetDataSet"/>
 		<parameter name="to" code="to  "	type="array of real" />
		<parameter name="as" code="rtyp" type="string" optional="yes" description="the requested format for the data in the file: &quot;real32&quot; | &quot;real64&quot; | &quot;uint8&quot; | &quot;uint16&quot; | &quot;uint32&quot; | &quot;sint8&quot; | &quot;sint16&quot; | &quot;sint32&quot;. Default: &quot;real64&quot;"/>
		<parameter name="big endian" code="Endi" type="boolean" optional="yes" description="the requested byteorder. Default: system byte order."/>
	</command>
	<command name="XNFSetScaleReference" code="XNF2ssci" description="set the scale of the specified axis to a reference of some 1-D dataset">
		<direct-parameter type="integer" description="index of the axis in the dataset"/>
		<parameter name="at" code="at  "	type="XMLRef" description="a node returned by XNFNewDataSet or XNFGetDataSet"/>
 		<parameter name="to" code="to  " type="string" description="the id of an existing dataset"/>
	</command>
	<command name="XNFSetScaleRange" code="XNF2sscr" description="set the scale of the specified axis to a range">
		<direct-parameter type="integer" description="index of the axis in the dataset"/>
		<parameter name="at" code="at  "	type="XMLRef" description="a node returned by XNFNewDataSet or XNFGetDataSet"/>
 		<parameter name="to" code="to  " description="a list {start,step}">
		<type type="real" list="yes"/>
		</parameter>
	</command>
	<command name="XNFGetScales" code="XNF2gsca" description="retrieve the scales of dataset. If &quot;start&quot; and &quot;length&quot; are present XNFGetScales returns the scales corresponding to the sub-array returned by XNFGetArray">
		<direct-parameter type="XMLRef" description="a dataset"/>
       		<parameter name="start" code="star" optional="yes" description="for each dimension of the dataset, the first element to read. 1-based">
 		<type type="integer" list="yes"/>
		</parameter>
       	<parameter name="length" code="leng" optional="yes" description="for each dimension of the dataset, number of elements to read">
		<type type="integer" list="yes"/>
		</parameter>
		<result description="">
			<type type="array of real" list="yes"/>
		</result>
	</command>
	<command name="XNFGetArray3D" code="XNF2oar3" description="see Numerics.osax about Array3DRef">
		<direct-parameter type="XMLRef" description="a 3-D dataset"/>
		<parameter name="index" code="indx"	type="integer" optional="yes" description="index of the array inside the dataset. Default 1"/>
  		<parameter name="name" code="pnam"	type="string" optional="yes" description="the name of the new Array3DRef"/>
 		<parameter name="part" code="part"	type="string" optional="yes" description="for complex arrays, choose a string in the set &quot;r&quot; (real part),  &quot;i&quot; (imaginary part),  &quot;m&quot; (modulus) or  &quot;p&quot; (phase)"/>
		<result type="Array3DRef" description=""/>
	</command>
    <command name="XNFRemove" code="XNF2dele" description="delete a dataset or an array">
      <direct-parameter type="XMLRef" description="the object to delete"/>
    </command>
 </suite>
	
	
	
	<suite name="" code="tpnm" hidden="yes">
    <command name="XMLCookie" code="XML Cook" description="store a cookie for a given host. This cookie is reused in forthcoming XMLOpen commands">
	<direct-parameter type="string" optional="yes" description="the value of the cookie. If the parameter is missing, XMLCookie silently returns the current value of the cookie"/>
	<parameter name="at" code="at  " type="string" description="the http (or https) URL providing the host"/>
	<result type="string" description="the previous value of the cookie"/>
    </command>
   <command name="XMLRegisterScheme" code="XML RgSc" description="register a URI scheme with an AppleScript callback. A cousin of rewriteURL">
	<direct-parameter type="string"  description="the scheme"/>
	<parameter name="subroutine" code="snam" type="string" description="the name of the AppleScript callback. The callback takes a string (URI) argument and returns a string (URI)"/>
    </command>
   <command name="XMLDisplayEntity" code="XML DiEn" description="">
	<direct-parameter type="string"  description="the entity name"/>
	<parameter name="at" code="at  " type="XMLRef" description="a document with a dtd"/>
	<result type="string"/>
    </command>
   <command name="XMLResolveScheme" code="XML RsSc" description="translate an URL as soon as a corresponding callback has been installed with XMLRegisterScheme">
	<direct-parameter type="string"  description="the original URL"/>
 	<result type="string" description="the translated URL"/>
   </command>
    <command name="PlistCopy" code="PLSTcopy" description="copy a dictionary or an array to another one. The 2 parameters must have the same type.">
      <direct-parameter type="CFRef" description="a dictionary or an array"/>
      <parameter name="to" code="to  " type="CFRef" description="a dictionary or an array"/>
    </command>
		<command name="ExtractBinary" code="XNF2Extr" description="">
				<direct-parameter type="file specification" description="the file"/>
				<parameter name="skip" code="skip" type="integer" optional="yes" description="the number of leading bytes to skip"/>
				<parameter name="big endian" code="Endi" type="boolean" optional="yes" description="is the file encoded as big endian or little endian? Default: system endianess (false on mac intel)."/>
				<parameter name="as" code="rtyp" type="string" description="the format of the data in the file: &quot;real32&quot; | &quot;real64&quot; | &quot;uint8&quot; | &quot;uint16&quot; | &quot;uint32&quot; | &quot;sint8&quot; | &quot;sint16&quot; | &quot;sint32&quot; | &quot;complex64&quot; | &quot;complex32&quot;"/>
	       	<parameter name="dimensions" code="dims" description="the dimensions of the array">
	 		<type type="integer" list="yes"/>
			</parameter>
	       	<parameter name="start" code="star" description="for each dimension of the array, the first element to read. 1-based">
	 		<type type="integer" list="yes"/>
			</parameter>
	       	<parameter name="length" code="leng" description="for each dimension of the array, number of elements to read">
	 		<type type="integer" list="yes"/>
			</parameter>
		<result description="">
			<type type="array of real"/>
			<type type="record"/>
		</result>
		</command>
		<command name="XMLObsolete" code="XML obso" description="">
				<direct-parameter type="boolean" description=""/>
				<result type="boolean" description=""/>
		</command>
    <command name="XMLGetTextObso" code="XML gtxO" description="return the textual contents of a node.">
      <direct-parameter type="XMLRef" description="an XML object containing a simple text node."/>
      <result type="string"/>
     </command>
    <command name="XMLGetAttributeObso" code="XML gtaO" description="return the contents of an attribute.">
      <direct-parameter description="">
	<type type="XMLRef"/>
	<type type="XMLRef" list="yes"/>
</direct-parameter>
      <parameter name="name" code="pnam" type="string" description="the name of the attribute"/>
      <parameter name="namespace" code="nsls" type="string" optional="yes" description="the namespace URL"/>
      <result type="string"/>
    </command>
    <command name="XMLTagNameObso" code="XML gtgO" description="return the name of the element.">
      <direct-parameter description="">
	<type type="XMLRef"/>
	<type type="XMLRef" list="yes"/>
</direct-parameter>
      <result type="string"/>
    </command>
    <command name="XMLFullTagName" code="XML gTag" description="return the name of the element.">
      <direct-parameter description="">
	<type type="XMLRef"/>
	<type type="XMLRef" list="yes"/>
</direct-parameter>
      <result type="string"/>
    </command>
    <command name="XMLDisplayXMLObso" code="XML disO" description="return an XML object as a string.">
      <direct-parameter type="XMLRef" description="(or a list of XMLRef) the XML object to display"/>
      <parameter name="formatting" code="smar" type="boolean" optional="yes" description="add returns and tabs for legibility. Default: true."/>
      <result type="string" description="(or a list of text)"/>
    </command>
    <command name="XMLNodeInfoObso" code="XML dspO" description="return node information.">
      <direct-parameter type="XMLRef" description="the XML object to display"/>
      <result type="NodeInfo" description="a record containing the name, the kind and the dictionary (attributes) of the object"/>
    </command>
    <command name="XMLSetTagName" code="XML stag" description="">
      <direct-parameter type="XMLRef" description="the XML object to display"/>
      <parameter name="to" code="to  " type="string" description="the new name"/>
    </command>
    <command name="XMLRemoveNamespace" code="XML rmns" description="">
      <direct-parameter type="namespace" description=""/>
      <parameter name="at" code="at  " type="XMLRef" description=""/>
    </command>
    <command name="ListPools" code="POOLlpoo" description="">
      <result description="">
<type type="string" list="yes"/>
	</result>
    </command>
     <command name="XMLXPathCompile" code="XML PreC" description="">
      <direct-parameter type="string" description="an xpath expression"/>
      <parameter name="in" code="in  " type="XMLRef" description=""/>
       <result type="integer" description=""/>
   </command>
   <command name="XMLGetNode at line" code="XML NbyL" description="">
      <direct-parameter type="integer" description="the line index"/>
      <parameter name="in" code="in  " type="XMLRef" description=""/>
       <result type="XMLRef" description=""/>
   </command>
   <command name="XMLParseCURIE" code="XML gtCU" description="return the non-abreviated URI corresponding to the data parameter or the value of an attribute (if name and/or namespace are specified) or the text contents of an element (no data and no name)">
      <direct-parameter type="XMLRef" description="an element or an attribute"/>
       <parameter name="name" code="pnam" type="string" optional="yes" description="the name of the attribute containing the CURIE"/>
       <parameter name="namespace" code="nsls" type="string" optional="yes" description="the namespace URL of the attribute"/>
       <parameter name="data" code="data" type="string" optional="yes" description="any CURIE (http://www.w3.org/TR/curie/) to be expanded in the context of the direct parameter"/>
    <result type="string"/>
    </command>
   <command name="XMLGetArray" code="XNF2getN" description="">
      <direct-parameter type="XMLRef" description=""/>
       	<parameter name="start" code="star" optional="yes" description="the index of the first element to read. 1-based, default 1">
 		<type type="integer" />
		</parameter>
       	<parameter name="length" code="leng" optional="yes" description="number of elements to read. Default: read until the end.">
 		<type type="integer"/>
	</parameter>
       <result type="array of real" description=""/>
       <documentation>
        <html>
XMLGetArray reads the attributes href, byte_order, offset, type, and size in the namespace "http://www.satimage.fr/software/dtds/XNFv2#".<br/>
@href is the (relative or absolute) location of the binary file.
@byte_order, @offset, @type, and @size work as indicated is the <a href="http://www.satimage.fr/software/dtds/XNFv2#">XNF dtd</a>.
        </html>
       </documentation>
  </command>
   <command name="XMLSetArray" code="XNF2setN" description="">
      <direct-parameter type="array of real" description=""/>
        <parameter name="at" code="at  " type="XMLRef" description="an element node"/>
        <parameter name="href" code="href" type="alias" description="the binary file to use"/>href
 		<parameter name="as" code="rtyp" type="string" optional="yes" description="the requested format for the data in the file: &quot;real32&quot; | &quot;real64&quot; | &quot;uint8&quot; | &quot;uint16&quot; | &quot;uint32&quot; | &quot;sint8&quot; | &quot;sint16&quot; | &quot;sint32&quot; | &quot;complex64&quot; | &quot;complex32&quot;. Default: &quot;real64&quot;"/>
		<parameter name="big endian" code="Endi" type="boolean" optional="yes" description="the requested byteorder. Default: system byte order."/>
  </command>
	 </suite>


  
  <!-- Numerics.sdef -->
  

<suite name="Linear algebra" code="ARRA" description="real vectors and real matrices must be provided as &quot;array of real&quot; and &quot;matrix&quot; (see the Satimage.osax). Complex vectors and matrices must be provided as list of 2 arrays of real or 2 matrices.">
		 	<class name="anything" code="****" description="any class or reference" hidden="yes"/>
			<class name="array of real" code="Lido" plural="arrays of real" hidden="yes"/>
			<class name="matrix" code="Matr" plural="matrices" hidden="yes"/>
			<class name="dimensions" code="dims" hidden="yes"/>
			<class name="scale" code="Tsca" hidden="yes"/>
			<class name="number of field" code="NFie" hidden="yes"/>
			<class name="alias" code="alis" plural="aliases" hidden="yes"/>
			<class name="file specification" code="fss " hidden="yes"/>
			<class name="bounding rectangle" code="qdrt" hidden="yes"/>
			<class name="XMLRef" code="XMLR" hidden="yes"/>
			<command name="currentEndianess" code="SATIEndi" description="" hidden="yes">
				<result type="boolean" description="return true means big endian"/>
			</command>
			<command name="transpose" code="SATITrMa" description="transpose a matrix. Provide a list of two matrices to transpose a complex matrix">
				<direct-parameter type="matrix" description="the matrix"/>
					<parameter name="adjoint" code="adjo" type="boolean" optional="yes" description="For complex matrix only: request the adjoint of the direct parameter. Default: true"/>
				<result type="matrix" description="the transposed matrix"/>
			</command>
			<command name="multmatrix" code="MATHMaPr" description="matrix x matrix, vector x matrix, matrix x vector, vector x vector (scalar product). Here vector stands for array of real. Provide a list of two matrices to define a complex matrix">
				<direct-parameter type="anything" description="array of real or matrix"/>
				<parameter name="with" code="with" type="anything" description="array of real or matrix"/>
				<result type="anything" description="real, array of real or matrix"/>
			</command>
			<command name="invertmatrix" code="MATHMaIn" description="invert a matrix">
				<direct-parameter type="matrix"	description="a matrix or a list of two matrices {A_real,A_imag}"/>
				<parameter name="positive" code="posi" type="boolean" optional="yes" description="false: general matrix,	true: positive symmetric or Hermitian matrix. default: false"/>
				<result type="record" description="return the inverse matrix (with ipiv). Determinant is always calculated"/>
			</command>
			<command name="solve linear system" code="LAPASOLV" description="Solve X for the linear system AX=B">
				<direct-parameter type="matrix"	description="a matrix or a list of two matrices {A_real,A_imag}"/>
				<parameter name="RHS" code="Ax=B" type="array of real"	description="B as array of real or a matrix representing the vectors in columns {B1,B2, ...} (for complex a list of two arrays of real or a list of two matrices)"/>
				<parameter name="symmetry" code="symm" type="boolean" optional="yes" description="false: general matrix,	true: symmetric or Hermitian matrix. default: false"/>
				<parameter name="positive" code="posi" type="boolean" optional="yes" description="true for definite positive matrix.	default: false"/>
				<result type="array of real" description="or a matrix if &quot;RHS&quot; is a matrix. Errors with small positive number n means minor n of A is not positive"/>
			</command>
			<command name="compute eigenvalues" code="LAPAEIGE" description="compute eigenvalues and eigenvectors of a matrix">
				<direct-parameter type="matrix"	description="a square matrix"/>
				<parameter name="eigenvects" code="EigV" type="boolean" optional="yes" description="true: compute the eigenvectors. default: false"/>
				<parameter name="Vtype" code="Vtyp" type="integer" optional="yes"	description="used when eigenvects are required for non symmetric matrices. 0:right, 1:left, 2:both eigenvects. default: 0"/>
				<parameter name="symmetry" code="symm" type="boolean" optional="yes" description="false: general matrix,	true: symmetric or Hermitian matrix. default: false"/>
				<parameter name="conquer" code="conq" type="boolean" optional="yes" description="false: standard driver, true: use divide-and-conquer driver in case of symmetric inputs. default: true"/>
				<parameter name="irange" code="iran" type="list of integer" optional="yes" description="a list of two integers {i1,i2}: eigenvalues (eigenvectors) from i1 to i2 are computed"/>
				<parameter name="erange" code="eran" type="list of real" optional="yes" description="the lower VL and upper VU bounds of the interval to be searched for eigenvalues. VL &lt; VU"/>
				<parameter name="RHS" code="RHS " type="matrix" optional="yes"	description="Solve the generalized problem with right hand side: Ax = lamba Bx. If symmetry is true, RHS has to be symmetric definite positive and Itype describes the following cases. Itype=1: Ax = lamba Bx, Itype=2: ABx = lambda x, Itype=3: BAx = lambda x"/>
				<parameter name="Itype" code="ityp" type="integer" optional="yes"	description="see descrition of &quot;RHS&quot;, default: 1"/>
				<result type="record" description="{eigenvalues:array of real or a list of 2 arrays of real, eigenvectors (or right eigenvectors and left eigenvectors if Vtype=2): matrix or a list of 2 matrices}"/>
			</command>
	<record-type name="Lapack result" code="EvR_" description="for complex data, each term list of two terms {real,imag}" >
					<property name="eigenvalues" code="3val" type="array of real" description="Eigenvalues E"/>
					<property name="eigenvectors" code="3vec" type="matrix" description="Eigenvectors"/>
					<property name="right eigenvectors" code="3ver" type="matrix" description="Right Eigenvectors"/>
					<property name="left eigenvectors" code="3vel" type="matrix" description="Left Eigenvectors"/>
					<property name="uppermatrix" code="UpMa" type="matrix" description="upper matrix from LU decomposition"/>
					<property name="lowermatrix" code="LoMa" type="matrix" description="lower matrix from LU decomposition"/>
					<property name="permutation vector" code="ipiv" type="matrix" description="Permutation vector"/>
					<property name="determinant" code="det " type="real" description="determinant"/>
	</record-type>
			<command name="LUdecomposition" code="LAPADeLU" description="returns the A=PLU decomposition or the Cholesky decomposition (A=U**TU) of a matrix A. P is a permutation matrix, L a lower triangular matrix and U an upper triangular matrix">
				<direct-parameter type="matrix"	description="you can provide a list of two matrices to define a complex matrix"/>
				<parameter name="positive" code="posi" type="boolean" optional="yes" description="false: general matrix, compute LU decomposition. True: compute Chowlesky decomposition; in this case the matrix A has to be positive symmetric or Hermitian. Default: false"/>
				<result type="Lapack result" description="{uppermatrix:matrix, lowermatrix:matrix, permutation vector:array of real, determinant:real}. lowermatrix and  permutation vector are not provided in case of Chowlesky decomposition. If you have provided a complex matrix, the results are lists of two matrices {real, imaginary}"/>
			</command>
			<command name="pivot" code="LAPAPivo" description="Apply the permutation defined by the permutation vector of the result of LUdecomposition">
				<direct-parameter type="array of real"	description="the permutation vector as returned by LUdecomposition"/>
				<parameter name="to" code="to  " type="anything" optional="yes" description="matrix or array of real"/>
				<result type="anything" description=""/>
			</command>
			<command name="compute determinant" code="LAPADETE" description="determinant of a matrix">
				<direct-parameter type="matrix"	description="a square matrix. You can provide a list of two matrices to define a complex matrix"/>
				<parameter name="positive" code="posi" type="boolean" optional="yes" description="false: general matrix,	true: positive symmetric or Hermitian matrix. default: false"/>
				<result type="real" description="or a list of 2 reals {re(det), im(det)}"/>
			</command>
</suite>

<suite name="FFT and convolution" code="ARRA" description="">
	<command name="fft1d" code="XPLAFFT1" description="normalized, general fast Fourier transform. This is a general interface allowing grouped and n-dimensional fft. Time is of order Nlog(N) but is better when the size of vectors is a product of powers of small prime numbers">
		<direct-parameter type="array of real" description="or a list {real part, imaginary part} of 2 arrays of real"/>
		<parameter name="inverse" code="back" optional="yes" type="boolean" description="default false, if true the inverse fft"/>
		<parameter name="lot" code="#arr" optional="yes" type="integer" description="the number of vectors to transform"/>
		<parameter name="vector size" code="size" optional="yes" type="integer" description="the number of elements of each vector"/>
		<parameter name="vector step" code="istr" optional="yes" type="integer" description="the distance between elements in a vector"/>
		<parameter name="vector offset" code="idis" optional="yes" type="integer" description="the distance between vectors"/>
		<result type="array of real" description="{real part, imaginary part} of the resulting fft"/>
	</command>
	<command name="fft2d" code="XPLAFFT2" description="2d fast Fourier transform">
		<direct-parameter type="matrix" description="or a list {real part, imaginary part} of 2 matrices"/>
		<parameter name="inverse" code="back" optional="yes" type="boolean" description="default false, if true the inverse fft"/>
		<result type="matrix" description="{real part, imaginary part} of the resulting fft"/>
	</command>
		<command name="filterarray" code="CONVCnv1" description="performs convolution. result is r(i)=sum over j of (s(i-j)f(j))">
			<direct-parameter type="array of real" description="the signal s (size ns)"/>
			<parameter name="using" code="by  " type="array of real" description="the filter f (size nf)"/>
			<parameter name="correlation" code="Corr" type="boolean" description="calculate correlation instead of convolution"/>
			<result type="array of real" description="the result r. its size is nr=ns-nf+1"/>
		</command>
		<command name="convolve" code="CONVconv" description="a function f by a function g. Returns the sum over j of f(i-j)*g(j). If not circular f is padded with n 0's outside its definition set">
			<direct-parameter type="array of real" description="the function f: an array of real of size n"/>
			<parameter name="by" code="by  " type="array of real" description="the function g: an array of real of size m. If m≠n, either f or g is padded with 0's"/>
			<parameter name="circular" code="CIRC" type="boolean" optional="yes" description="the functions f and g are periodized with period max(n,m). Default: true"/>
			<result type="array of real" description="if circular size of the result is max(n,m), else 2*max(n,m)-1"/>
		</command>
		<command name="correlate" code="CONVcorr" description="returns the sum over j of (f(i+j)-&lt;f&gt;)*(g(j)-&lt;g&gt;)">
			<direct-parameter type="array of real" description="the signal (size n)"/>
			<parameter name="to" code="to  " type="array of real" description="another signal of size n"/>
			<parameter name="circular" code="CIRC" type="boolean"  optional="yes" description="the signals are periodized with period n. Default: true"/>
			<parameter name="normalized" code="NORM" type="boolean" optional="yes" description="if normalized the result of &quot;correlate x to x&quot; is smaller than 1 and takes the value 1 at index 1 if circular, and at index n if not circular. Default: true"/>
			<result type="array of real" description="if circular size of the result is n, else 2*n-1 and the origin (i=0) is at index n"/>
		</command>
      <command name="interpolate" code="MATHINTR" description="">
        <direct-parameter type="list of array of real" description="{xs,ys}" optional="yes"/>
        <parameter name="at" code="at  " type="array of real" description="the new xs"/>
        <parameter name="period" code="peri" type="real" optional="yes" description=""/>
        <parameter name="linear" code="Linr" type="boolean" optional="yes" description="linear interpolation vs. spline. Default false."/>
        <parameter name="boundary conditions" code="bndc" type="list of real" optional="yes" description="{dy1,dyn}"/>
        <result type="array of real" description="the new ys"/>
     </command>
</suite>

<suite name="Image files" code="IMAG" description="utilities for image processing.">
	<command name="imagefile bounds" code="SATIImBd" description="return the bounds of a bitmap image (JPEG, TIFF etc.)">
		<direct-parameter type="alias"/>
		<result type="bounding rectangle"/>
	</command>
	<command name="convert imagefile" code="SATIImCn" description="return the array of the gray levels of a bitmap image (JPEG, TIFF etc.)">
		<direct-parameter type="alias"/>
		<parameter name="selected rectangle" code="Rect" type="bounding rectangle" optional="yes"/>
		<parameter name="vertical flip" code="VeFl" type="boolean" optional="yes" description="default:false, the origin of the matrix corresponds to the top-left corner."/>
		<result type="matrix"/>
	</command>
	<command name="create grayimagefile" code="IMAGIGSa" description="convert matrix values into 256 levels then save it as a gray bitmap image (PNG, JPEG, TIFF etc.)">
		<direct-parameter type="matrix"/>
		<parameter name="in" code="in  " type="file specification" description="destination file. Its extension specifies the image format"/>
		<parameter name="inverted" code="Inve" type="boolean" optional="yes" description="inverse image levels. Default false"/>
		<parameter name="minimum" code="MIN " type="real" optional="yes" description="matrix values equal or greater than this value are set to 255. Default: maximum of the matrix values"/>
		<parameter name="maximum" code="MAX " type="real" optional="yes" description="matrix values equal or lower than this value are set to 0. Default: minimum of the matrix values"/>
		<parameter name="resolution" code="Scal" type="integer" optional="yes" description="image resolution. Default: 72dpi"/>
		<result type="alias"/>
	</command>
	<command name="particles" code="SATICPar" description="find particles in an image">
		<direct-parameter type="matrix" description="the image as a matrix containing the grey levels"/>
		<parameter name="threshold" code="leve" type="real"/>
		<parameter name="data" code="r$$$" type="boolean" optional="yes" description="get xdata and ydata info in the result record"/>
		<parameter name="minimum" code="MIN " type="real" optional="yes" description="minimum area"/>
		<parameter name="maximum" code="MAX " type="real" optional="yes" description="maximum area"/>
		<result type="record" description="info on particles"/>
	</command>
</suite>
	
	<suite name="3D array handling" code="VI3D" description="commands to handle 3D arrays. &quot;open3D&quot; loads a 3D array in memory and returns an ID number. You refer to a 3D array either with its ID or its name">
			<value-type name="Array3DRef" code="VI3D" description="a reference to an opened 3D array"/>
			<command name="open3D" code="VI3Dodoc" description="Loads a 3D array and returns an ID for it. The memory must be released with &quot;close3D&quot;">
				<direct-parameter type="string" description="the name of the 3D array" optional="yes"/>
				<parameter name="dimensions" code="dims" type="list of integer" description="the 3 dimensions {nx, ny, nz} of the array. nx, ny and, nz are either an integer or an array of real altogether defining the size and the scale. If a dimension is an integer the scale is assumed to be {0, 1, 2, ...}"/>
				<parameter name="field" code="scfl" type="array of real" description="an array of real (or a list of 3 arrays of real defining a vector field) with nz as leading dimension. The value for {ix, iy, iz} must be at offset ix+nx*iy+nx*ny*iz"/>
				<result type="Array3DRef" description="ID to the 3D array"/>
			</command>
			<command name="close3D" code="VI3Dclos" description="release the memory associated to a opened 3D array">
				<direct-parameter type="Array3DRef" description="a reference to an opened 3D array (or its name)"/>
			</command>
			<command name="info3D" code="VI3Dinfo" description="">
				<direct-parameter type="Array3DRef" description="a reference to an opened 3D array (or its name)"/>
				<result type="record" description="the dimensions and scales"/>
			</command>
			<command name="contents3D" code="VI3Dgetd" description="">
				<direct-parameter type="Array3DRef" description="a reference to an opened 3D array (or its name)"/>
				<result type="array of real" description="the data"/>
			</command>
			<command name="list3D" code="VI3Dlstn" description="">
				<parameter name="as" code="as  " type="anything" optional="yes" description="list3D as string returns the names of the opened 3D arrays instead of their references"/>
				<result type="list of Array3DRef" description="the references of the opened 3D arrays"/>
			</command>
			<command name="rename3D" code="VI3Drena" description="rename an opened 3D array.">
				<direct-parameter type="Array3DRef" description="a reference to an opened 3D array (or its name)"/>
				<parameter name="into" code="into" type="string" description="the new name"/>
			</command>
			<command name="extract3D" code="VI3Dextr" description="Extract a subset from a 3D array">
				<direct-parameter type="Array3DRef" description="a reference to an opened 3D array (or its name)"/>
				<parameter name="start" code="star" type="list of integer" description="the 3 1-based offsets"/>
				<parameter name="length" code="leng" type="list of integer" description="the 3 lengths"/>
				<parameter name="field index" code="INDX" type="integer" optional="yes" description="if the 3D array is a vector field, a number between 1 and 3. Default 1"/>
				<result type="array of real" description=""/>
			</command>
			<command name="isosurface" code="VI3Dsurf" description="computes an isosurface for a 3D field">
				<direct-parameter type="Array3DRef" description="a reference to an opened 3D array (or its name)"/>
				<parameter name="at" code="isov" type="real" description="the isosurface value"/>
				<parameter name="field index" code="INDX" type="integer" optional="yes" description="if the 3D array is a vector field, a number between 1 and 3. Default 1"/>
				<result type="array of real" description="the triangle list as an array of real that defines the isosurface"/>
			</command>
			<command name="streamline" code="VI3Dinte" description="Computes a streamline for an opened vector field">
				<direct-parameter type="Array3DRef" description="a reference to an opened 3D array (or its name)"/>
				<parameter name="starting at" code="Strt" type="list of real" description="a point {x, y, z}"/>
				<parameter name="resolution" code="Step" optional="yes" type="real" description="Default 1. Smaller value increases the number of points in the streamline"/>
				<parameter name="direction" code="Idir" optional="yes" type="integer" description="Default 1. Set to -1 to compute the streamline along opposite direction"/>
				<result type="array of real" description="the coordinates of the streamline's points {x1,y1,z1,...,xn,yn,zn}"/>
			</command>
	</suite>
  
  
  <!-- FITS.sdef -->
  
	
	<suite name="FITS" code="FITS" description="FITS.osax provides commands to read FITS data files. Uses the FITSIO project. mailto:support@satimage-software.com">
		<class name="kind" code="kind" hidden="yes">
			</class>
		<class name="alias" code="alis" hidden="yes" plural="aliases">
			</class>
		<class name="array of real" code="Lido" plural="arrays of real" description="a packed list of small real. Can be coerced to an AppleScript list with 'as list of real'. Conversely, a list of real may be translated using 'as array of real' for fast computation.">
			</class>
		<class name="dimensions" code="dims" plural="dimensions">
			</class>
		<class name="matrix" code="Matr" plural="matrices" description="An AppleScript representation of a 2D array of real numbers as a record">
			<property name="ncols" code="ncol" type="integer" description="the number of columns"/>
			<property name="nrows" code="nrow" type="integer" description="the number of rows"/>
			<property name="array of real" code="Lido" type="array of real" description="the data, as an array of real or as a standard AppleScript list of real numbers. Ordering: the first numbers are the data for the first row."/>
		</class>
		<command name="FITSOpen" code="FITSodoc" description="open a FITS file">
			<direct-parameter type="alias" description="path to the FITS file"/>
			<result type="integer" description="a reference number to the opened file"/>
		</command>
		<command name="FITSClose" code="FITSclos" description="close a FITS file">
			<direct-parameter type="integer" description="a reference to an opened FITS file"/>
		</command>
		<command name="FITSCount" code="FITScunt" description="count data units in a FITS file">
			<direct-parameter type="integer" description="a reference to an opened FITS file"/>
			<result type="integer" description="the number of units"/>
		</command>
		<command name="FITSMovein" code="FITSmove" description="select a data unit in a FITS file">
			<direct-parameter type="integer" description="a reference to an opened FITS file"/>
			<parameter name="to" code="to  " type="integer" description="the unit index or the unit name"/>
			<result type="string" description="the type of the selected unit"/>
		</command>
		<command name="FITSInfo" code="FITSginf" description="get info from the current unit of the opened FITS file">
			<direct-parameter type="integer" description="a reference to an opened FITS file"/>
			<parameter name="verbose" code="verb" type="boolean" optional="yes" description="default: false. If verbose is true, FITSInfo returns the full header of the current unit. Otherwise, returns the type of the unit and the list of its dimensions."/>
			<result type="record" description="or string if verbose"/>
		</command>
		<command name="FITSPlist" code="FITSplst" description="get info from the current unit of the opened FITS file as xml data">
			<direct-parameter type="integer" description="a reference to an opened FITS file"/>
			<parameter name="as" code="rtyp" type="type" optional="yes" description="string or CFRef. Default: CFRef"/>
			<result>
				<type type="string"/>
				<type type="CFRef"/>
			</result>
		</command>
		<command name="FITSReadImage" code="FITSrimg" description=" read an image unit in  a FITS file">
			<direct-parameter type="integer" description="a reference to an opened FITS file"/>
			<parameter name="along" code="alon" optional="yes" type="integer" description="axis to slice for image dimension equal to 3 "/>
			<parameter name="at" code="at  " optional="yes" type="integer" description=" index to read for image dimension equal to 3 "/>
			<result type="array of real" description="or matrix if result is 2D."/>
		</command>
		<command name="FITSTableInfo" code="FITStinf" description=" Get basic info about the column of a table unit in  a FITS file">
			<direct-parameter type="integer" description="a reference to an opened FITS file"/>
			<parameter name="column" code="colu" description="index (or name) of column">
				<type type="integer"/>
				<type type="string"/>
			</parameter>
			<result type="record" description="column name, number of rows and data type of the column"/>
		</command>
		<command name="FITSReadTable" code="FITSrtab" description=" Read a column of a table unit in  a FITS file">
			<direct-parameter type="integer" description="a reference to an opened FITS file"/>
			<parameter name="column" code="colu" description="index (or name) of column">
				<type type="integer"/>
				<type type="string"/>
			</parameter>
			<result description="the table column as array of real or string if the column type is string">
				<type type="array of real"/>
				<type type="string" list="yes"/>
			</result>
		</command>
		<command name="FITSExtractimage" code="FITSExtr" description="">
			<direct-parameter type="integer" description="a reference to an opened FITS file"/>
			<parameter name="start" code="star" description="for each dimension of the image, the first element to read. 1-based">
				<type type="integer" list="yes"/>
			</parameter>
			<parameter name="length" code="leng" description="for each dimension of the image, number of elements to read">
				<type type="integer" list="yes"/>
			</parameter>
			<result description="">
				<type type="array of real"/>
				<type type="record"/>
			</result>
		</command>
	</suite>
	
	
	
<!-- Files.sdef -->




	<suite name="Files and folders suite" code="Quom">
		<documentation>
			<html>
In this dictionary, alias must be understood as alias or posix path or url.
        </html>
		</documentation>
		<class name="alias" code="alis" hidden="yes" plural="aliases"/>
		<class name="file specification" code="fss " hidden="yes"/>
		<command name="filenew" code="QuomNewF" description="create a new empty file, fail if already exists.">
			<direct-parameter description="the destination folder, or a file path.">
				<type type="alias"/>
			</direct-parameter>
			<parameter name="name" code="pnam" type="string" description="the file name. If the name parameter is not provided, the direct parameter is considered as the destination file path."/>
			<parameter name="recursively" code="RECU" type="boolean" optional="yes" description="create intermediate directories as required. Default false."/>
			<result type="alias" description="the new file"/>
		</command>
		<command name="mkdir" code="QuomMkDi" description="create a new directory.">
			<direct-parameter description="a  directory path">
				<type type="alias"/>
			</direct-parameter>
			<parameter name="name" code="pnam" type="string" optional="yes" description="the name of the new directory (if not provided in the direct parameter)"/>
			<parameter name="recursively" code="RECU" type="boolean" optional="yes" description="create intermediate directories as required. Default true."/>
			<result type="alias" description="the new directory"/>
		</command>
		<command name="filecopy" code="QuomCopy" description="copy a file synchronously">
			<direct-parameter description="the file(s) to copy">
				<type type="alias"/>
				<type type="alias" list="yes"/>
			</direct-parameter>
			<parameter name="from" code="from" type="alias" optional="yes" description="the base url. Relevant if direct parameter is a string or a list of strings."/>
			<parameter name="to" code="to  " type="alias" optional="yes" description="the destination folder. Required unless the &quot;filepath&quot; parameter is specified"/>
			<parameter name="name" code="pnam" type="string" optional="yes" description="the new file name (when using the &quot;to&quot; parameter). Not allowed if the direct parameter is a list. Default: the original file name"/>
			<parameter name="filepath" code="into" type="file specification" optional="yes" description="an alternative to the use of the &quot;to&quot; and &quot;name&quot; parameters: the destination file path. Not allowed if the direct parameter is a list"/>
			<parameter name="into" code="intO" type="file specification" optional="yes" description="for backward compatibility. Same as as filepath."/>
			<parameter name="replacing" code="Repl" type="boolean" optional="yes" description="allow to replace an existing item. Default: false"/>
			<parameter name="full copy" code="full" type="boolean" optional="yes" description="copy all attributes of the file. Default: false"/>
			<result description="the copied file(s)">
				<type type="alias"/>
				<type type="alias" list="yes"/>
			</result>
		</command>
		<command name="filemove" code="QuomMove" description="move a file synchronously">
			<direct-parameter description="the file(s) to move">
				<type type="alias"/>
				<type type="alias" list="yes"/>
			</direct-parameter>
			<parameter name="from" code="from" type="alias" optional="yes" description="the base url. Relevant if direct parameter is a string or a list of strings."/>
			<parameter name="to" code="to  " type="alias" optional="yes" description="the destination folder. Required unless the &quot;filepath&quot; parameter is specified"/>
			<parameter name="name" code="pnam" type="string" optional="yes" description="the new file name (when using the &quot;to&quot; parameter). Not allowed if the direct parameter is a list. Default: the old file name"/>
			<parameter name="filepath" code="into" type="file specification" optional="yes" description="an alternative to the use of the &quot;to&quot; and &quot;name&quot; parameters: the destination file path. Not allowed if the direct parameter is a list"/>
			<parameter name="into" code="intO" type="file specification" optional="yes" description="for backward compatibility. Same as as filepath."/>
			<parameter name="replacing" code="Repl" type="boolean" optional="yes" description="allow to replace an existing item. Default: false"/>
			<parameter name="full copy" code="full" type="boolean" optional="yes" description="copy all attributes of the file. Default: false"/>
			<result description="the moved file(s)">
				<type type="alias"/>
				<type type="alias" list="yes"/>
			</result>
		</command>
		<command name="fileremove" code="QuomRemo" description="remove a file synchronously">
			<direct-parameter description="the file(s) or folder(s) to remove">
				<type type="alias"/>
				<type type="alias" list="yes"/>
			</direct-parameter>
			<parameter name="from" code="from" type="alias" optional="yes" description="the base url. Relevant if direct parameter is a string or a list of strings."/>
			<parameter name="filesonly" code="FOnl" type="boolean" optional="yes" description="False : delete the item(s) of direct parameter. True : delete only files and handle a folder in the direct parameters as the list of its files. Default: false"/>
			<parameter name="after" code="afte" type="date" optional="yes" description="allowed only with filesonly true"/>
			<parameter name="before" code="befo" type="date" optional="yes" description="allowed only with filesonly true"/>
			<parameter name="locked files" code="CUnl" type="boolean" optional="yes" description="if true, remove also locked files. Default true"/>
			<parameter name="busy files" code="BUnl" type="boolean" optional="yes" description="if true, unlink busy files. Default true"/>
		</command>
		<command name="filegetname" code="QuomGFNa" description="returns the name of a file">
			<direct-parameter description="">
				<type type="alias"/>
				<type type="alias" list="yes"/>
			</direct-parameter>
			<result description="the file name">
				<type type="string"/>
				<type type="string" list="yes"/>
			</result>
		</command>
		<command name="filerename" code="QuomRenF" description="rename a file">
			<direct-parameter description="">
				<type type="alias"/>
			</direct-parameter>
			<parameter name="to" code="to  " type="string" description="the new file name."/>
			<result type="alias" description="the renamed file"/>
		</command>
		<command name="mkstemp" code="Quommkst" description="create a new empty file using mkstemp.">
			<direct-parameter description="the destination folder, or a file path.">
				<type type="alias"/>
				<type type="posix path"/>
			</direct-parameter>
			<parameter name="name" code="pnam" type="string" optional="yes" description="the template of the file name. mkstemp will create a new file named prefixXXXXXXsuffix where name is prefixsuffix. If missing, the direct parameter must be a file path"/>
			<parameter name="suffix" code="suff" type="integer" optional="yes" description="the length of the suffix in name (typically the length of the extension+1). Default 0"/>
			<parameter name="wildcards" code="wild" type="integer" optional="yes" description="number of wildcards. Default 6"/>
			<parameter name="mode" code="Mode" type="string" optional="yes" description="the permissions, an integer provided as an octal string. Default: &quot;666&quot;"/>
			<result type="alias" description="the new file"/>
		</command>
		<command name="mkdtemp" code="Quommkdt" description="create a new folder using mkdtemp.">
			<direct-parameter description="the destination folder, or the full folder path.">
				<type type="alias"/>
				<type type="posix path"/>
			</direct-parameter>
			<parameter name="name" code="pnam" type="string" optional="yes" description="the prefix of the folder name. mkdtemp will create a new folder named prefixXXXXXX"/>
			<parameter name="wildcards" code="wild" type="integer" optional="yes" description="number of wildcards. Default 6"/>
			<parameter name="mode" code="Mode" type="string" optional="yes" description="the permissions, an integer provided as an octal string. Default: &quot;777&quot;"/>
			<result type="alias" description="the new folder"/>
		</command>
		<command name="chmod" code="Quomchmd" description="set and get the access permissions. If the &quot;to&quot; parameter is missing &quot;chmod&quot; simply returns the current permissions">
			<direct-parameter description="the file or the folder">
				<type type="alias"/>
				<type type="posix path"/>
			</direct-parameter>
			<parameter name="to" code="to  " type="string" optional="yes" description="the new permissions, an integer provided as an octal string (1:excecute +2:write+4:read for user, group and others)"/>
			<result type="string" description="the previous permissions as an octal string."/>
		</command>
	</suite>
	
	<suite name="Symlink suite" code="Quom">
		<command name="create symlink" code="QuomSymL" description="create a symlink">
			<direct-parameter description="the target of the new symlink. Can be an alias or a string (an absolute or relative posix path)">
				<type type="alias"/>
				<type type="posix path"/>
			</direct-parameter>
			<parameter name="in" code="in  " type="alias" description="the folder where to create the symlink"/>
			<parameter name="name" code="pnam" type="string" optional="yes" description="the new file name. Default: the name of the symlink's target"/>
			<parameter name="replacing" code="Repl" type="boolean" optional="yes" description="allow to replace an existing symlink. Default: true"/>
		</command>
		<command name="testsymlink" code="QuomIsSy" description="return true if the direct parameter is a symlink, false otherwise">
			<direct-parameter description="don't provide an alias; the symlink will be automatically resolved">
				<type type="url"/>
				<type type="posix path"/>
			</direct-parameter>
			<result type="boolean" description=""/>
			<documentation>
				<html>
					<div style="display:none" class="example">
						<div class="example-source">set f1 to filenew "~/Desktop/" name "a"
create symlink f1 in "~/Desktop/" name "b"
set f2 to absoluteURL "~/Desktop/b" as alias
testsymlink f2
-- false
testsymlink "~/Desktop/b"
-- true
testsymlink "file://localhost/Users/alexis/Desktop/b"
--true
</div>
					</div>
				</html>
			</documentation>
		</command>
		<command name="readlink" code="Quomrdsy" description="return the contents of a symlink">
			<direct-parameter description="don't provide an alias; the symlink will be automatically resolved">
				<type type="url"/>
				<type type="posix path"/>
			</direct-parameter>
			<result type="string" description=""/>
		</command>
	</suite>	
  
  
  
</dictionary>
